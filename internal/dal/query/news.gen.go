// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newNews(db *gorm.DB, opts ...gen.DOOption) news {
	_news := news{}

	_news.newsDo.UseDB(db, opts...)
	_news.newsDo.UseModel(&gen_model.News{})

	tableName := _news.newsDo.TableName()
	_news.ALL = field.NewAsterisk(tableName)
	_news.Contentid = field.NewInt32(tableName, "contentid")
	_news.Content = field.NewString(tableName, "content")

	_news.fillFieldMap()

	return _news
}

type news struct {
	newsDo

	ALL       field.Asterisk
	Contentid field.Int32
	Content   field.String

	fieldMap map[string]field.Expr
}

func (n news) Table(newTableName string) *news {
	n.newsDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n news) As(alias string) *news {
	n.newsDo.DO = *(n.newsDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *news) updateTableName(table string) *news {
	n.ALL = field.NewAsterisk(table)
	n.Contentid = field.NewInt32(table, "contentid")
	n.Content = field.NewString(table, "content")

	n.fillFieldMap()

	return n
}

func (n *news) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *news) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 2)
	n.fieldMap["contentid"] = n.Contentid
	n.fieldMap["content"] = n.Content
}

func (n news) clone(db *gorm.DB) news {
	n.newsDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n news) replaceDB(db *gorm.DB) news {
	n.newsDo.ReplaceDB(db)
	return n
}

type newsDo struct{ gen.DO }

type INewsDo interface {
	gen.SubQuery
	Debug() INewsDo
	WithContext(ctx context.Context) INewsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INewsDo
	WriteDB() INewsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INewsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INewsDo
	Not(conds ...gen.Condition) INewsDo
	Or(conds ...gen.Condition) INewsDo
	Select(conds ...field.Expr) INewsDo
	Where(conds ...gen.Condition) INewsDo
	Order(conds ...field.Expr) INewsDo
	Distinct(cols ...field.Expr) INewsDo
	Omit(cols ...field.Expr) INewsDo
	Join(table schema.Tabler, on ...field.Expr) INewsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INewsDo
	RightJoin(table schema.Tabler, on ...field.Expr) INewsDo
	Group(cols ...field.Expr) INewsDo
	Having(conds ...gen.Condition) INewsDo
	Limit(limit int) INewsDo
	Offset(offset int) INewsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INewsDo
	Unscoped() INewsDo
	Create(values ...*gen_model.News) error
	CreateInBatches(values []*gen_model.News, batchSize int) error
	Save(values ...*gen_model.News) error
	First() (*gen_model.News, error)
	Take() (*gen_model.News, error)
	Last() (*gen_model.News, error)
	Find() ([]*gen_model.News, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.News, err error)
	FindInBatches(result *[]*gen_model.News, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.News) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INewsDo
	Assign(attrs ...field.AssignExpr) INewsDo
	Joins(fields ...field.RelationField) INewsDo
	Preload(fields ...field.RelationField) INewsDo
	FirstOrInit() (*gen_model.News, error)
	FirstOrCreate() (*gen_model.News, error)
	FindByPage(offset int, limit int) (result []*gen_model.News, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INewsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n newsDo) Debug() INewsDo {
	return n.withDO(n.DO.Debug())
}

func (n newsDo) WithContext(ctx context.Context) INewsDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n newsDo) ReadDB() INewsDo {
	return n.Clauses(dbresolver.Read)
}

func (n newsDo) WriteDB() INewsDo {
	return n.Clauses(dbresolver.Write)
}

func (n newsDo) Session(config *gorm.Session) INewsDo {
	return n.withDO(n.DO.Session(config))
}

func (n newsDo) Clauses(conds ...clause.Expression) INewsDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n newsDo) Returning(value interface{}, columns ...string) INewsDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n newsDo) Not(conds ...gen.Condition) INewsDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n newsDo) Or(conds ...gen.Condition) INewsDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n newsDo) Select(conds ...field.Expr) INewsDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n newsDo) Where(conds ...gen.Condition) INewsDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n newsDo) Order(conds ...field.Expr) INewsDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n newsDo) Distinct(cols ...field.Expr) INewsDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n newsDo) Omit(cols ...field.Expr) INewsDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n newsDo) Join(table schema.Tabler, on ...field.Expr) INewsDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n newsDo) LeftJoin(table schema.Tabler, on ...field.Expr) INewsDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n newsDo) RightJoin(table schema.Tabler, on ...field.Expr) INewsDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n newsDo) Group(cols ...field.Expr) INewsDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n newsDo) Having(conds ...gen.Condition) INewsDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n newsDo) Limit(limit int) INewsDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n newsDo) Offset(offset int) INewsDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n newsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INewsDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n newsDo) Unscoped() INewsDo {
	return n.withDO(n.DO.Unscoped())
}

func (n newsDo) Create(values ...*gen_model.News) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n newsDo) CreateInBatches(values []*gen_model.News, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n newsDo) Save(values ...*gen_model.News) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n newsDo) First() (*gen_model.News, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.News), nil
	}
}

func (n newsDo) Take() (*gen_model.News, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.News), nil
	}
}

func (n newsDo) Last() (*gen_model.News, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.News), nil
	}
}

func (n newsDo) Find() ([]*gen_model.News, error) {
	result, err := n.DO.Find()
	return result.([]*gen_model.News), err
}

func (n newsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.News, err error) {
	buf := make([]*gen_model.News, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n newsDo) FindInBatches(result *[]*gen_model.News, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n newsDo) Attrs(attrs ...field.AssignExpr) INewsDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n newsDo) Assign(attrs ...field.AssignExpr) INewsDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n newsDo) Joins(fields ...field.RelationField) INewsDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n newsDo) Preload(fields ...field.RelationField) INewsDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n newsDo) FirstOrInit() (*gen_model.News, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.News), nil
	}
}

func (n newsDo) FirstOrCreate() (*gen_model.News, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.News), nil
	}
}

func (n newsDo) FindByPage(offset int, limit int) (result []*gen_model.News, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n newsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n newsDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n newsDo) Delete(models ...*gen_model.News) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *newsDo) withDO(do gen.Dao) *newsDo {
	n.DO = *do.(*gen.DO)
	return n
}
