// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newAdminGroup(db *gorm.DB, opts ...gen.DOOption) adminGroup {
	_adminGroup := adminGroup{}

	_adminGroup.adminGroupDo.UseDB(db, opts...)
	_adminGroup.adminGroupDo.UseModel(&gen_model.AdminGroup{})

	tableName := _adminGroup.adminGroupDo.TableName()
	_adminGroup.ALL = field.NewAsterisk(tableName)
	_adminGroup.ID = field.NewInt32(tableName, "id")
	_adminGroup.Name = field.NewString(tableName, "name")

	_adminGroup.fillFieldMap()

	return _adminGroup
}

type adminGroup struct {
	adminGroupDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (a adminGroup) Table(newTableName string) *adminGroup {
	a.adminGroupDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminGroup) As(alias string) *adminGroup {
	a.adminGroupDo.DO = *(a.adminGroupDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminGroup) updateTableName(table string) *adminGroup {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")

	a.fillFieldMap()

	return a
}

func (a *adminGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminGroup) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
}

func (a adminGroup) clone(db *gorm.DB) adminGroup {
	a.adminGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminGroup) replaceDB(db *gorm.DB) adminGroup {
	a.adminGroupDo.ReplaceDB(db)
	return a
}

type adminGroupDo struct{ gen.DO }

type IAdminGroupDo interface {
	gen.SubQuery
	Debug() IAdminGroupDo
	WithContext(ctx context.Context) IAdminGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminGroupDo
	WriteDB() IAdminGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminGroupDo
	Not(conds ...gen.Condition) IAdminGroupDo
	Or(conds ...gen.Condition) IAdminGroupDo
	Select(conds ...field.Expr) IAdminGroupDo
	Where(conds ...gen.Condition) IAdminGroupDo
	Order(conds ...field.Expr) IAdminGroupDo
	Distinct(cols ...field.Expr) IAdminGroupDo
	Omit(cols ...field.Expr) IAdminGroupDo
	Join(table schema.Tabler, on ...field.Expr) IAdminGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminGroupDo
	Group(cols ...field.Expr) IAdminGroupDo
	Having(conds ...gen.Condition) IAdminGroupDo
	Limit(limit int) IAdminGroupDo
	Offset(offset int) IAdminGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminGroupDo
	Unscoped() IAdminGroupDo
	Create(values ...*gen_model.AdminGroup) error
	CreateInBatches(values []*gen_model.AdminGroup, batchSize int) error
	Save(values ...*gen_model.AdminGroup) error
	First() (*gen_model.AdminGroup, error)
	Take() (*gen_model.AdminGroup, error)
	Last() (*gen_model.AdminGroup, error)
	Find() ([]*gen_model.AdminGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.AdminGroup, err error)
	FindInBatches(result *[]*gen_model.AdminGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.AdminGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminGroupDo
	Assign(attrs ...field.AssignExpr) IAdminGroupDo
	Joins(fields ...field.RelationField) IAdminGroupDo
	Preload(fields ...field.RelationField) IAdminGroupDo
	FirstOrInit() (*gen_model.AdminGroup, error)
	FirstOrCreate() (*gen_model.AdminGroup, error)
	FindByPage(offset int, limit int) (result []*gen_model.AdminGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminGroupDo) Debug() IAdminGroupDo {
	return a.withDO(a.DO.Debug())
}

func (a adminGroupDo) WithContext(ctx context.Context) IAdminGroupDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminGroupDo) ReadDB() IAdminGroupDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminGroupDo) WriteDB() IAdminGroupDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminGroupDo) Session(config *gorm.Session) IAdminGroupDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminGroupDo) Clauses(conds ...clause.Expression) IAdminGroupDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminGroupDo) Returning(value interface{}, columns ...string) IAdminGroupDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminGroupDo) Not(conds ...gen.Condition) IAdminGroupDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminGroupDo) Or(conds ...gen.Condition) IAdminGroupDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminGroupDo) Select(conds ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminGroupDo) Where(conds ...gen.Condition) IAdminGroupDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminGroupDo) Order(conds ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminGroupDo) Distinct(cols ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminGroupDo) Omit(cols ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminGroupDo) Join(table schema.Tabler, on ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminGroupDo) Group(cols ...field.Expr) IAdminGroupDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminGroupDo) Having(conds ...gen.Condition) IAdminGroupDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminGroupDo) Limit(limit int) IAdminGroupDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminGroupDo) Offset(offset int) IAdminGroupDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminGroupDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminGroupDo) Unscoped() IAdminGroupDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminGroupDo) Create(values ...*gen_model.AdminGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminGroupDo) CreateInBatches(values []*gen_model.AdminGroup, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminGroupDo) Save(values ...*gen_model.AdminGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminGroupDo) First() (*gen_model.AdminGroup, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AdminGroup), nil
	}
}

func (a adminGroupDo) Take() (*gen_model.AdminGroup, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AdminGroup), nil
	}
}

func (a adminGroupDo) Last() (*gen_model.AdminGroup, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AdminGroup), nil
	}
}

func (a adminGroupDo) Find() ([]*gen_model.AdminGroup, error) {
	result, err := a.DO.Find()
	return result.([]*gen_model.AdminGroup), err
}

func (a adminGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.AdminGroup, err error) {
	buf := make([]*gen_model.AdminGroup, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminGroupDo) FindInBatches(result *[]*gen_model.AdminGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminGroupDo) Attrs(attrs ...field.AssignExpr) IAdminGroupDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminGroupDo) Assign(attrs ...field.AssignExpr) IAdminGroupDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminGroupDo) Joins(fields ...field.RelationField) IAdminGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminGroupDo) Preload(fields ...field.RelationField) IAdminGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminGroupDo) FirstOrInit() (*gen_model.AdminGroup, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AdminGroup), nil
	}
}

func (a adminGroupDo) FirstOrCreate() (*gen_model.AdminGroup, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.AdminGroup), nil
	}
}

func (a adminGroupDo) FindByPage(offset int, limit int) (result []*gen_model.AdminGroup, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminGroupDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminGroupDo) Delete(models ...*gen_model.AdminGroup) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminGroupDo) withDO(do gen.Dao) *adminGroupDo {
	a.DO = *do.(*gen.DO)
	return a
}
