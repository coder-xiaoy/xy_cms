// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newFormField(db *gorm.DB, opts ...gen.DOOption) formField {
	_formField := formField{}

	_formField.formFieldDo.UseDB(db, opts...)
	_formField.formFieldDo.UseModel(&gen_model.FormField{})

	tableName := _formField.formFieldDo.TableName()
	_formField.ALL = field.NewAsterisk(tableName)
	_formField.Fieldid = field.NewInt32(tableName, "fieldid")
	_formField.Formid = field.NewInt32(tableName, "formid")
	_formField.Field = field.NewString(tableName, "field")
	_formField.Name = field.NewString(tableName, "name")
	_formField.Formtype = field.NewString(tableName, "formtype")
	_formField.Width = field.NewInt32(tableName, "width")
	_formField.Height = field.NewInt32(tableName, "height")
	_formField.Initial = field.NewString(tableName, "initial")
	_formField.Explain = field.NewString(tableName, "explain")
	_formField.Sort = field.NewInt32(tableName, "sort")
	_formField.IsFixed = field.NewBool(tableName, "is_fixed")

	_formField.fillFieldMap()

	return _formField
}

type formField struct {
	formFieldDo

	ALL      field.Asterisk
	Fieldid  field.Int32
	Formid   field.Int32
	Field    field.String
	Name     field.String
	Formtype field.String
	Width    field.Int32
	Height   field.Int32
	Initial  field.String
	Explain  field.String
	Sort     field.Int32
	IsFixed  field.Bool

	fieldMap map[string]field.Expr
}

func (f formField) Table(newTableName string) *formField {
	f.formFieldDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f formField) As(alias string) *formField {
	f.formFieldDo.DO = *(f.formFieldDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *formField) updateTableName(table string) *formField {
	f.ALL = field.NewAsterisk(table)
	f.Fieldid = field.NewInt32(table, "fieldid")
	f.Formid = field.NewInt32(table, "formid")
	f.Field = field.NewString(table, "field")
	f.Name = field.NewString(table, "name")
	f.Formtype = field.NewString(table, "formtype")
	f.Width = field.NewInt32(table, "width")
	f.Height = field.NewInt32(table, "height")
	f.Initial = field.NewString(table, "initial")
	f.Explain = field.NewString(table, "explain")
	f.Sort = field.NewInt32(table, "sort")
	f.IsFixed = field.NewBool(table, "is_fixed")

	f.fillFieldMap()

	return f
}

func (f *formField) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *formField) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["fieldid"] = f.Fieldid
	f.fieldMap["formid"] = f.Formid
	f.fieldMap["field"] = f.Field
	f.fieldMap["name"] = f.Name
	f.fieldMap["formtype"] = f.Formtype
	f.fieldMap["width"] = f.Width
	f.fieldMap["height"] = f.Height
	f.fieldMap["initial"] = f.Initial
	f.fieldMap["explain"] = f.Explain
	f.fieldMap["sort"] = f.Sort
	f.fieldMap["is_fixed"] = f.IsFixed
}

func (f formField) clone(db *gorm.DB) formField {
	f.formFieldDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f formField) replaceDB(db *gorm.DB) formField {
	f.formFieldDo.ReplaceDB(db)
	return f
}

type formFieldDo struct{ gen.DO }

type IFormFieldDo interface {
	gen.SubQuery
	Debug() IFormFieldDo
	WithContext(ctx context.Context) IFormFieldDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFormFieldDo
	WriteDB() IFormFieldDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFormFieldDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFormFieldDo
	Not(conds ...gen.Condition) IFormFieldDo
	Or(conds ...gen.Condition) IFormFieldDo
	Select(conds ...field.Expr) IFormFieldDo
	Where(conds ...gen.Condition) IFormFieldDo
	Order(conds ...field.Expr) IFormFieldDo
	Distinct(cols ...field.Expr) IFormFieldDo
	Omit(cols ...field.Expr) IFormFieldDo
	Join(table schema.Tabler, on ...field.Expr) IFormFieldDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFormFieldDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFormFieldDo
	Group(cols ...field.Expr) IFormFieldDo
	Having(conds ...gen.Condition) IFormFieldDo
	Limit(limit int) IFormFieldDo
	Offset(offset int) IFormFieldDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFormFieldDo
	Unscoped() IFormFieldDo
	Create(values ...*gen_model.FormField) error
	CreateInBatches(values []*gen_model.FormField, batchSize int) error
	Save(values ...*gen_model.FormField) error
	First() (*gen_model.FormField, error)
	Take() (*gen_model.FormField, error)
	Last() (*gen_model.FormField, error)
	Find() ([]*gen_model.FormField, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.FormField, err error)
	FindInBatches(result *[]*gen_model.FormField, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.FormField) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFormFieldDo
	Assign(attrs ...field.AssignExpr) IFormFieldDo
	Joins(fields ...field.RelationField) IFormFieldDo
	Preload(fields ...field.RelationField) IFormFieldDo
	FirstOrInit() (*gen_model.FormField, error)
	FirstOrCreate() (*gen_model.FormField, error)
	FindByPage(offset int, limit int) (result []*gen_model.FormField, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFormFieldDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f formFieldDo) Debug() IFormFieldDo {
	return f.withDO(f.DO.Debug())
}

func (f formFieldDo) WithContext(ctx context.Context) IFormFieldDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f formFieldDo) ReadDB() IFormFieldDo {
	return f.Clauses(dbresolver.Read)
}

func (f formFieldDo) WriteDB() IFormFieldDo {
	return f.Clauses(dbresolver.Write)
}

func (f formFieldDo) Session(config *gorm.Session) IFormFieldDo {
	return f.withDO(f.DO.Session(config))
}

func (f formFieldDo) Clauses(conds ...clause.Expression) IFormFieldDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f formFieldDo) Returning(value interface{}, columns ...string) IFormFieldDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f formFieldDo) Not(conds ...gen.Condition) IFormFieldDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f formFieldDo) Or(conds ...gen.Condition) IFormFieldDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f formFieldDo) Select(conds ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f formFieldDo) Where(conds ...gen.Condition) IFormFieldDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f formFieldDo) Order(conds ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f formFieldDo) Distinct(cols ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f formFieldDo) Omit(cols ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f formFieldDo) Join(table schema.Tabler, on ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f formFieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f formFieldDo) RightJoin(table schema.Tabler, on ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f formFieldDo) Group(cols ...field.Expr) IFormFieldDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f formFieldDo) Having(conds ...gen.Condition) IFormFieldDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f formFieldDo) Limit(limit int) IFormFieldDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f formFieldDo) Offset(offset int) IFormFieldDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f formFieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFormFieldDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f formFieldDo) Unscoped() IFormFieldDo {
	return f.withDO(f.DO.Unscoped())
}

func (f formFieldDo) Create(values ...*gen_model.FormField) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f formFieldDo) CreateInBatches(values []*gen_model.FormField, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f formFieldDo) Save(values ...*gen_model.FormField) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f formFieldDo) First() (*gen_model.FormField, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FormField), nil
	}
}

func (f formFieldDo) Take() (*gen_model.FormField, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FormField), nil
	}
}

func (f formFieldDo) Last() (*gen_model.FormField, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FormField), nil
	}
}

func (f formFieldDo) Find() ([]*gen_model.FormField, error) {
	result, err := f.DO.Find()
	return result.([]*gen_model.FormField), err
}

func (f formFieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.FormField, err error) {
	buf := make([]*gen_model.FormField, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f formFieldDo) FindInBatches(result *[]*gen_model.FormField, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f formFieldDo) Attrs(attrs ...field.AssignExpr) IFormFieldDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f formFieldDo) Assign(attrs ...field.AssignExpr) IFormFieldDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f formFieldDo) Joins(fields ...field.RelationField) IFormFieldDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f formFieldDo) Preload(fields ...field.RelationField) IFormFieldDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f formFieldDo) FirstOrInit() (*gen_model.FormField, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FormField), nil
	}
}

func (f formFieldDo) FirstOrCreate() (*gen_model.FormField, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FormField), nil
	}
}

func (f formFieldDo) FindByPage(offset int, limit int) (result []*gen_model.FormField, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f formFieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f formFieldDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f formFieldDo) Delete(models ...*gen_model.FormField) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *formFieldDo) withDO(do gen.Dao) *formFieldDo {
	f.DO = *do.(*gen.DO)
	return f
}
