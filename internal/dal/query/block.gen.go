// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newBlock(db *gorm.DB, opts ...gen.DOOption) block {
	_block := block{}

	_block.blockDo.UseDB(db, opts...)
	_block.blockDo.UseModel(&gen_model.Block{})

	tableName := _block.blockDo.TableName()
	_block.ALL = field.NewAsterisk(tableName)
	_block.ID = field.NewInt32(tableName, "id")
	_block.Title = field.NewString(tableName, "title")
	_block.Tag = field.NewString(tableName, "tag")
	_block.Content = field.NewString(tableName, "content")

	_block.fillFieldMap()

	return _block
}

type block struct {
	blockDo

	ALL     field.Asterisk
	ID      field.Int32
	Title   field.String
	Tag     field.String
	Content field.String

	fieldMap map[string]field.Expr
}

func (b block) Table(newTableName string) *block {
	b.blockDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b block) As(alias string) *block {
	b.blockDo.DO = *(b.blockDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *block) updateTableName(table string) *block {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.Title = field.NewString(table, "title")
	b.Tag = field.NewString(table, "tag")
	b.Content = field.NewString(table, "content")

	b.fillFieldMap()

	return b
}

func (b *block) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *block) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["id"] = b.ID
	b.fieldMap["title"] = b.Title
	b.fieldMap["tag"] = b.Tag
	b.fieldMap["content"] = b.Content
}

func (b block) clone(db *gorm.DB) block {
	b.blockDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b block) replaceDB(db *gorm.DB) block {
	b.blockDo.ReplaceDB(db)
	return b
}

type blockDo struct{ gen.DO }

type IBlockDo interface {
	gen.SubQuery
	Debug() IBlockDo
	WithContext(ctx context.Context) IBlockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlockDo
	WriteDB() IBlockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlockDo
	Not(conds ...gen.Condition) IBlockDo
	Or(conds ...gen.Condition) IBlockDo
	Select(conds ...field.Expr) IBlockDo
	Where(conds ...gen.Condition) IBlockDo
	Order(conds ...field.Expr) IBlockDo
	Distinct(cols ...field.Expr) IBlockDo
	Omit(cols ...field.Expr) IBlockDo
	Join(table schema.Tabler, on ...field.Expr) IBlockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlockDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlockDo
	Group(cols ...field.Expr) IBlockDo
	Having(conds ...gen.Condition) IBlockDo
	Limit(limit int) IBlockDo
	Offset(offset int) IBlockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlockDo
	Unscoped() IBlockDo
	Create(values ...*gen_model.Block) error
	CreateInBatches(values []*gen_model.Block, batchSize int) error
	Save(values ...*gen_model.Block) error
	First() (*gen_model.Block, error)
	Take() (*gen_model.Block, error)
	Last() (*gen_model.Block, error)
	Find() ([]*gen_model.Block, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Block, err error)
	FindInBatches(result *[]*gen_model.Block, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Block) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlockDo
	Assign(attrs ...field.AssignExpr) IBlockDo
	Joins(fields ...field.RelationField) IBlockDo
	Preload(fields ...field.RelationField) IBlockDo
	FirstOrInit() (*gen_model.Block, error)
	FirstOrCreate() (*gen_model.Block, error)
	FindByPage(offset int, limit int) (result []*gen_model.Block, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b blockDo) Debug() IBlockDo {
	return b.withDO(b.DO.Debug())
}

func (b blockDo) WithContext(ctx context.Context) IBlockDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blockDo) ReadDB() IBlockDo {
	return b.Clauses(dbresolver.Read)
}

func (b blockDo) WriteDB() IBlockDo {
	return b.Clauses(dbresolver.Write)
}

func (b blockDo) Session(config *gorm.Session) IBlockDo {
	return b.withDO(b.DO.Session(config))
}

func (b blockDo) Clauses(conds ...clause.Expression) IBlockDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blockDo) Returning(value interface{}, columns ...string) IBlockDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blockDo) Not(conds ...gen.Condition) IBlockDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blockDo) Or(conds ...gen.Condition) IBlockDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blockDo) Select(conds ...field.Expr) IBlockDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blockDo) Where(conds ...gen.Condition) IBlockDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blockDo) Order(conds ...field.Expr) IBlockDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blockDo) Distinct(cols ...field.Expr) IBlockDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blockDo) Omit(cols ...field.Expr) IBlockDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blockDo) Join(table schema.Tabler, on ...field.Expr) IBlockDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blockDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlockDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blockDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlockDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blockDo) Group(cols ...field.Expr) IBlockDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blockDo) Having(conds ...gen.Condition) IBlockDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blockDo) Limit(limit int) IBlockDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blockDo) Offset(offset int) IBlockDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlockDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blockDo) Unscoped() IBlockDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blockDo) Create(values ...*gen_model.Block) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blockDo) CreateInBatches(values []*gen_model.Block, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blockDo) Save(values ...*gen_model.Block) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blockDo) First() (*gen_model.Block, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Block), nil
	}
}

func (b blockDo) Take() (*gen_model.Block, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Block), nil
	}
}

func (b blockDo) Last() (*gen_model.Block, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Block), nil
	}
}

func (b blockDo) Find() ([]*gen_model.Block, error) {
	result, err := b.DO.Find()
	return result.([]*gen_model.Block), err
}

func (b blockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Block, err error) {
	buf := make([]*gen_model.Block, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blockDo) FindInBatches(result *[]*gen_model.Block, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blockDo) Attrs(attrs ...field.AssignExpr) IBlockDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blockDo) Assign(attrs ...field.AssignExpr) IBlockDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blockDo) Joins(fields ...field.RelationField) IBlockDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blockDo) Preload(fields ...field.RelationField) IBlockDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blockDo) FirstOrInit() (*gen_model.Block, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Block), nil
	}
}

func (b blockDo) FirstOrCreate() (*gen_model.Block, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Block), nil
	}
}

func (b blockDo) FindByPage(offset int, limit int) (result []*gen_model.Block, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blockDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blockDo) Delete(models ...*gen_model.Block) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blockDo) withDO(do gen.Dao) *blockDo {
	b.DO = *do.(*gen.DO)
	return b
}
