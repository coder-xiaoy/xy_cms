// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newUrlrule(db *gorm.DB, opts ...gen.DOOption) urlrule {
	_urlrule := urlrule{}

	_urlrule.urlruleDo.UseDB(db, opts...)
	_urlrule.urlruleDo.UseModel(&gen_model.Urlrule{})

	tableName := _urlrule.urlruleDo.TableName()
	_urlrule.ALL = field.NewAsterisk(tableName)
	_urlrule.ID = field.NewInt32(tableName, "id")
	_urlrule.Class = field.NewString(tableName, "class")
	_urlrule.Ishtml = field.NewBool(tableName, "ishtml")
	_urlrule.Urldemo = field.NewString(tableName, "urldemo")
	_urlrule.URL = field.NewString(tableName, "url")
	_urlrule.IsFixed = field.NewBool(tableName, "is_fixed")

	_urlrule.fillFieldMap()

	return _urlrule
}

type urlrule struct {
	urlruleDo

	ALL     field.Asterisk
	ID      field.Int32
	Class   field.String
	Ishtml  field.Bool
	Urldemo field.String
	URL     field.String
	IsFixed field.Bool

	fieldMap map[string]field.Expr
}

func (u urlrule) Table(newTableName string) *urlrule {
	u.urlruleDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u urlrule) As(alias string) *urlrule {
	u.urlruleDo.DO = *(u.urlruleDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *urlrule) updateTableName(table string) *urlrule {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Class = field.NewString(table, "class")
	u.Ishtml = field.NewBool(table, "ishtml")
	u.Urldemo = field.NewString(table, "urldemo")
	u.URL = field.NewString(table, "url")
	u.IsFixed = field.NewBool(table, "is_fixed")

	u.fillFieldMap()

	return u
}

func (u *urlrule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *urlrule) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["class"] = u.Class
	u.fieldMap["ishtml"] = u.Ishtml
	u.fieldMap["urldemo"] = u.Urldemo
	u.fieldMap["url"] = u.URL
	u.fieldMap["is_fixed"] = u.IsFixed
}

func (u urlrule) clone(db *gorm.DB) urlrule {
	u.urlruleDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u urlrule) replaceDB(db *gorm.DB) urlrule {
	u.urlruleDo.ReplaceDB(db)
	return u
}

type urlruleDo struct{ gen.DO }

type IUrlruleDo interface {
	gen.SubQuery
	Debug() IUrlruleDo
	WithContext(ctx context.Context) IUrlruleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUrlruleDo
	WriteDB() IUrlruleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUrlruleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUrlruleDo
	Not(conds ...gen.Condition) IUrlruleDo
	Or(conds ...gen.Condition) IUrlruleDo
	Select(conds ...field.Expr) IUrlruleDo
	Where(conds ...gen.Condition) IUrlruleDo
	Order(conds ...field.Expr) IUrlruleDo
	Distinct(cols ...field.Expr) IUrlruleDo
	Omit(cols ...field.Expr) IUrlruleDo
	Join(table schema.Tabler, on ...field.Expr) IUrlruleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUrlruleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUrlruleDo
	Group(cols ...field.Expr) IUrlruleDo
	Having(conds ...gen.Condition) IUrlruleDo
	Limit(limit int) IUrlruleDo
	Offset(offset int) IUrlruleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUrlruleDo
	Unscoped() IUrlruleDo
	Create(values ...*gen_model.Urlrule) error
	CreateInBatches(values []*gen_model.Urlrule, batchSize int) error
	Save(values ...*gen_model.Urlrule) error
	First() (*gen_model.Urlrule, error)
	Take() (*gen_model.Urlrule, error)
	Last() (*gen_model.Urlrule, error)
	Find() ([]*gen_model.Urlrule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Urlrule, err error)
	FindInBatches(result *[]*gen_model.Urlrule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Urlrule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUrlruleDo
	Assign(attrs ...field.AssignExpr) IUrlruleDo
	Joins(fields ...field.RelationField) IUrlruleDo
	Preload(fields ...field.RelationField) IUrlruleDo
	FirstOrInit() (*gen_model.Urlrule, error)
	FirstOrCreate() (*gen_model.Urlrule, error)
	FindByPage(offset int, limit int) (result []*gen_model.Urlrule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUrlruleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u urlruleDo) Debug() IUrlruleDo {
	return u.withDO(u.DO.Debug())
}

func (u urlruleDo) WithContext(ctx context.Context) IUrlruleDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u urlruleDo) ReadDB() IUrlruleDo {
	return u.Clauses(dbresolver.Read)
}

func (u urlruleDo) WriteDB() IUrlruleDo {
	return u.Clauses(dbresolver.Write)
}

func (u urlruleDo) Session(config *gorm.Session) IUrlruleDo {
	return u.withDO(u.DO.Session(config))
}

func (u urlruleDo) Clauses(conds ...clause.Expression) IUrlruleDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u urlruleDo) Returning(value interface{}, columns ...string) IUrlruleDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u urlruleDo) Not(conds ...gen.Condition) IUrlruleDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u urlruleDo) Or(conds ...gen.Condition) IUrlruleDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u urlruleDo) Select(conds ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u urlruleDo) Where(conds ...gen.Condition) IUrlruleDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u urlruleDo) Order(conds ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u urlruleDo) Distinct(cols ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u urlruleDo) Omit(cols ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u urlruleDo) Join(table schema.Tabler, on ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u urlruleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u urlruleDo) RightJoin(table schema.Tabler, on ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u urlruleDo) Group(cols ...field.Expr) IUrlruleDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u urlruleDo) Having(conds ...gen.Condition) IUrlruleDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u urlruleDo) Limit(limit int) IUrlruleDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u urlruleDo) Offset(offset int) IUrlruleDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u urlruleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUrlruleDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u urlruleDo) Unscoped() IUrlruleDo {
	return u.withDO(u.DO.Unscoped())
}

func (u urlruleDo) Create(values ...*gen_model.Urlrule) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u urlruleDo) CreateInBatches(values []*gen_model.Urlrule, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u urlruleDo) Save(values ...*gen_model.Urlrule) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u urlruleDo) First() (*gen_model.Urlrule, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Urlrule), nil
	}
}

func (u urlruleDo) Take() (*gen_model.Urlrule, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Urlrule), nil
	}
}

func (u urlruleDo) Last() (*gen_model.Urlrule, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Urlrule), nil
	}
}

func (u urlruleDo) Find() ([]*gen_model.Urlrule, error) {
	result, err := u.DO.Find()
	return result.([]*gen_model.Urlrule), err
}

func (u urlruleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Urlrule, err error) {
	buf := make([]*gen_model.Urlrule, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u urlruleDo) FindInBatches(result *[]*gen_model.Urlrule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u urlruleDo) Attrs(attrs ...field.AssignExpr) IUrlruleDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u urlruleDo) Assign(attrs ...field.AssignExpr) IUrlruleDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u urlruleDo) Joins(fields ...field.RelationField) IUrlruleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u urlruleDo) Preload(fields ...field.RelationField) IUrlruleDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u urlruleDo) FirstOrInit() (*gen_model.Urlrule, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Urlrule), nil
	}
}

func (u urlruleDo) FirstOrCreate() (*gen_model.Urlrule, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Urlrule), nil
	}
}

func (u urlruleDo) FindByPage(offset int, limit int) (result []*gen_model.Urlrule, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u urlruleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u urlruleDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u urlruleDo) Delete(models ...*gen_model.Urlrule) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *urlruleDo) withDO(do gen.Dao) *urlruleDo {
	u.DO = *do.(*gen.DO)
	return u
}
