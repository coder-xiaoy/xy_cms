// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newSingle(db *gorm.DB, opts ...gen.DOOption) single {
	_single := single{}

	_single.singleDo.UseDB(db, opts...)
	_single.singleDo.UseModel(&gen_model.Single{})

	tableName := _single.singleDo.TableName()
	_single.ALL = field.NewAsterisk(tableName)
	_single.Contentid = field.NewInt32(tableName, "contentid")
	_single.Content = field.NewString(tableName, "content")

	_single.fillFieldMap()

	return _single
}

type single struct {
	singleDo

	ALL       field.Asterisk
	Contentid field.Int32
	Content   field.String

	fieldMap map[string]field.Expr
}

func (s single) Table(newTableName string) *single {
	s.singleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s single) As(alias string) *single {
	s.singleDo.DO = *(s.singleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *single) updateTableName(table string) *single {
	s.ALL = field.NewAsterisk(table)
	s.Contentid = field.NewInt32(table, "contentid")
	s.Content = field.NewString(table, "content")

	s.fillFieldMap()

	return s
}

func (s *single) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *single) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["contentid"] = s.Contentid
	s.fieldMap["content"] = s.Content
}

func (s single) clone(db *gorm.DB) single {
	s.singleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s single) replaceDB(db *gorm.DB) single {
	s.singleDo.ReplaceDB(db)
	return s
}

type singleDo struct{ gen.DO }

type ISingleDo interface {
	gen.SubQuery
	Debug() ISingleDo
	WithContext(ctx context.Context) ISingleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISingleDo
	WriteDB() ISingleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISingleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISingleDo
	Not(conds ...gen.Condition) ISingleDo
	Or(conds ...gen.Condition) ISingleDo
	Select(conds ...field.Expr) ISingleDo
	Where(conds ...gen.Condition) ISingleDo
	Order(conds ...field.Expr) ISingleDo
	Distinct(cols ...field.Expr) ISingleDo
	Omit(cols ...field.Expr) ISingleDo
	Join(table schema.Tabler, on ...field.Expr) ISingleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISingleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISingleDo
	Group(cols ...field.Expr) ISingleDo
	Having(conds ...gen.Condition) ISingleDo
	Limit(limit int) ISingleDo
	Offset(offset int) ISingleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleDo
	Unscoped() ISingleDo
	Create(values ...*gen_model.Single) error
	CreateInBatches(values []*gen_model.Single, batchSize int) error
	Save(values ...*gen_model.Single) error
	First() (*gen_model.Single, error)
	Take() (*gen_model.Single, error)
	Last() (*gen_model.Single, error)
	Find() ([]*gen_model.Single, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Single, err error)
	FindInBatches(result *[]*gen_model.Single, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Single) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISingleDo
	Assign(attrs ...field.AssignExpr) ISingleDo
	Joins(fields ...field.RelationField) ISingleDo
	Preload(fields ...field.RelationField) ISingleDo
	FirstOrInit() (*gen_model.Single, error)
	FirstOrCreate() (*gen_model.Single, error)
	FindByPage(offset int, limit int) (result []*gen_model.Single, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISingleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s singleDo) Debug() ISingleDo {
	return s.withDO(s.DO.Debug())
}

func (s singleDo) WithContext(ctx context.Context) ISingleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s singleDo) ReadDB() ISingleDo {
	return s.Clauses(dbresolver.Read)
}

func (s singleDo) WriteDB() ISingleDo {
	return s.Clauses(dbresolver.Write)
}

func (s singleDo) Session(config *gorm.Session) ISingleDo {
	return s.withDO(s.DO.Session(config))
}

func (s singleDo) Clauses(conds ...clause.Expression) ISingleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s singleDo) Returning(value interface{}, columns ...string) ISingleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s singleDo) Not(conds ...gen.Condition) ISingleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s singleDo) Or(conds ...gen.Condition) ISingleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s singleDo) Select(conds ...field.Expr) ISingleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s singleDo) Where(conds ...gen.Condition) ISingleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s singleDo) Order(conds ...field.Expr) ISingleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s singleDo) Distinct(cols ...field.Expr) ISingleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s singleDo) Omit(cols ...field.Expr) ISingleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s singleDo) Join(table schema.Tabler, on ...field.Expr) ISingleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s singleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISingleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s singleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISingleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s singleDo) Group(cols ...field.Expr) ISingleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s singleDo) Having(conds ...gen.Condition) ISingleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s singleDo) Limit(limit int) ISingleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s singleDo) Offset(offset int) ISingleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s singleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s singleDo) Unscoped() ISingleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s singleDo) Create(values ...*gen_model.Single) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s singleDo) CreateInBatches(values []*gen_model.Single, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s singleDo) Save(values ...*gen_model.Single) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s singleDo) First() (*gen_model.Single, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Single), nil
	}
}

func (s singleDo) Take() (*gen_model.Single, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Single), nil
	}
}

func (s singleDo) Last() (*gen_model.Single, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Single), nil
	}
}

func (s singleDo) Find() ([]*gen_model.Single, error) {
	result, err := s.DO.Find()
	return result.([]*gen_model.Single), err
}

func (s singleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Single, err error) {
	buf := make([]*gen_model.Single, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s singleDo) FindInBatches(result *[]*gen_model.Single, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s singleDo) Attrs(attrs ...field.AssignExpr) ISingleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s singleDo) Assign(attrs ...field.AssignExpr) ISingleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s singleDo) Joins(fields ...field.RelationField) ISingleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s singleDo) Preload(fields ...field.RelationField) ISingleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s singleDo) FirstOrInit() (*gen_model.Single, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Single), nil
	}
}

func (s singleDo) FirstOrCreate() (*gen_model.Single, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Single), nil
	}
}

func (s singleDo) FindByPage(offset int, limit int) (result []*gen_model.Single, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s singleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s singleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s singleDo) Delete(models ...*gen_model.Single) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *singleDo) withDO(do gen.Dao) *singleDo {
	s.DO = *do.(*gen.DO)
	return s
}
