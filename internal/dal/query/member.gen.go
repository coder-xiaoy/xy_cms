// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newMember(db *gorm.DB, opts ...gen.DOOption) member {
	_member := member{}

	_member.memberDo.UseDB(db, opts...)
	_member.memberDo.UseModel(&gen_model.Member{})

	tableName := _member.memberDo.TableName()
	_member.ALL = field.NewAsterisk(tableName)
	_member.Userid = field.NewInt32(tableName, "userid")
	_member.Groupid = field.NewInt32(tableName, "groupid")
	_member.Username = field.NewString(tableName, "username")
	_member.Password = field.NewString(tableName, "password")
	_member.LastTime = field.NewInt32(tableName, "last_time")
	_member.CreatTime = field.NewInt32(tableName, "creat_time")
	_member.IsLock = field.NewInt32(tableName, "is_lock")
	_member.LastIP = field.NewString(tableName, "last_ip")
	_member.Logins = field.NewInt32(tableName, "logins")
	_member.Sex = field.NewString(tableName, "sex")
	_member.Truename = field.NewString(tableName, "truename")
	_member.Phone = field.NewString(tableName, "phone")
	_member.Address = field.NewString(tableName, "address")
	_member.Email = field.NewString(tableName, "email")

	_member.fillFieldMap()

	return _member
}

type member struct {
	memberDo

	ALL       field.Asterisk
	Userid    field.Int32
	Groupid   field.Int32
	Username  field.String
	Password  field.String
	LastTime  field.Int32
	CreatTime field.Int32
	IsLock    field.Int32
	LastIP    field.String
	Logins    field.Int32
	Sex       field.String
	Truename  field.String
	Phone     field.String
	Address   field.String
	Email     field.String

	fieldMap map[string]field.Expr
}

func (m member) Table(newTableName string) *member {
	m.memberDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m member) As(alias string) *member {
	m.memberDo.DO = *(m.memberDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *member) updateTableName(table string) *member {
	m.ALL = field.NewAsterisk(table)
	m.Userid = field.NewInt32(table, "userid")
	m.Groupid = field.NewInt32(table, "groupid")
	m.Username = field.NewString(table, "username")
	m.Password = field.NewString(table, "password")
	m.LastTime = field.NewInt32(table, "last_time")
	m.CreatTime = field.NewInt32(table, "creat_time")
	m.IsLock = field.NewInt32(table, "is_lock")
	m.LastIP = field.NewString(table, "last_ip")
	m.Logins = field.NewInt32(table, "logins")
	m.Sex = field.NewString(table, "sex")
	m.Truename = field.NewString(table, "truename")
	m.Phone = field.NewString(table, "phone")
	m.Address = field.NewString(table, "address")
	m.Email = field.NewString(table, "email")

	m.fillFieldMap()

	return m
}

func (m *member) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *member) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 14)
	m.fieldMap["userid"] = m.Userid
	m.fieldMap["groupid"] = m.Groupid
	m.fieldMap["username"] = m.Username
	m.fieldMap["password"] = m.Password
	m.fieldMap["last_time"] = m.LastTime
	m.fieldMap["creat_time"] = m.CreatTime
	m.fieldMap["is_lock"] = m.IsLock
	m.fieldMap["last_ip"] = m.LastIP
	m.fieldMap["logins"] = m.Logins
	m.fieldMap["sex"] = m.Sex
	m.fieldMap["truename"] = m.Truename
	m.fieldMap["phone"] = m.Phone
	m.fieldMap["address"] = m.Address
	m.fieldMap["email"] = m.Email
}

func (m member) clone(db *gorm.DB) member {
	m.memberDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m member) replaceDB(db *gorm.DB) member {
	m.memberDo.ReplaceDB(db)
	return m
}

type memberDo struct{ gen.DO }

type IMemberDo interface {
	gen.SubQuery
	Debug() IMemberDo
	WithContext(ctx context.Context) IMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberDo
	WriteDB() IMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberDo
	Not(conds ...gen.Condition) IMemberDo
	Or(conds ...gen.Condition) IMemberDo
	Select(conds ...field.Expr) IMemberDo
	Where(conds ...gen.Condition) IMemberDo
	Order(conds ...field.Expr) IMemberDo
	Distinct(cols ...field.Expr) IMemberDo
	Omit(cols ...field.Expr) IMemberDo
	Join(table schema.Tabler, on ...field.Expr) IMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberDo
	Group(cols ...field.Expr) IMemberDo
	Having(conds ...gen.Condition) IMemberDo
	Limit(limit int) IMemberDo
	Offset(offset int) IMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberDo
	Unscoped() IMemberDo
	Create(values ...*gen_model.Member) error
	CreateInBatches(values []*gen_model.Member, batchSize int) error
	Save(values ...*gen_model.Member) error
	First() (*gen_model.Member, error)
	Take() (*gen_model.Member, error)
	Last() (*gen_model.Member, error)
	Find() ([]*gen_model.Member, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Member, err error)
	FindInBatches(result *[]*gen_model.Member, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Member) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberDo
	Assign(attrs ...field.AssignExpr) IMemberDo
	Joins(fields ...field.RelationField) IMemberDo
	Preload(fields ...field.RelationField) IMemberDo
	FirstOrInit() (*gen_model.Member, error)
	FirstOrCreate() (*gen_model.Member, error)
	FindByPage(offset int, limit int) (result []*gen_model.Member, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberDo) Debug() IMemberDo {
	return m.withDO(m.DO.Debug())
}

func (m memberDo) WithContext(ctx context.Context) IMemberDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberDo) ReadDB() IMemberDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberDo) WriteDB() IMemberDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberDo) Session(config *gorm.Session) IMemberDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberDo) Clauses(conds ...clause.Expression) IMemberDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberDo) Returning(value interface{}, columns ...string) IMemberDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberDo) Not(conds ...gen.Condition) IMemberDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberDo) Or(conds ...gen.Condition) IMemberDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberDo) Select(conds ...field.Expr) IMemberDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberDo) Where(conds ...gen.Condition) IMemberDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberDo) Order(conds ...field.Expr) IMemberDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberDo) Distinct(cols ...field.Expr) IMemberDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberDo) Omit(cols ...field.Expr) IMemberDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberDo) Join(table schema.Tabler, on ...field.Expr) IMemberDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberDo) Group(cols ...field.Expr) IMemberDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberDo) Having(conds ...gen.Condition) IMemberDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberDo) Limit(limit int) IMemberDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberDo) Offset(offset int) IMemberDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberDo) Unscoped() IMemberDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberDo) Create(values ...*gen_model.Member) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberDo) CreateInBatches(values []*gen_model.Member, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberDo) Save(values ...*gen_model.Member) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberDo) First() (*gen_model.Member, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Member), nil
	}
}

func (m memberDo) Take() (*gen_model.Member, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Member), nil
	}
}

func (m memberDo) Last() (*gen_model.Member, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Member), nil
	}
}

func (m memberDo) Find() ([]*gen_model.Member, error) {
	result, err := m.DO.Find()
	return result.([]*gen_model.Member), err
}

func (m memberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Member, err error) {
	buf := make([]*gen_model.Member, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberDo) FindInBatches(result *[]*gen_model.Member, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberDo) Attrs(attrs ...field.AssignExpr) IMemberDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberDo) Assign(attrs ...field.AssignExpr) IMemberDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberDo) Joins(fields ...field.RelationField) IMemberDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberDo) Preload(fields ...field.RelationField) IMemberDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberDo) FirstOrInit() (*gen_model.Member, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Member), nil
	}
}

func (m memberDo) FirstOrCreate() (*gen_model.Member, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Member), nil
	}
}

func (m memberDo) FindByPage(offset int, limit int) (result []*gen_model.Member, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberDo) Delete(models ...*gen_model.Member) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberDo) withDO(do gen.Dao) *memberDo {
	m.DO = *do.(*gen.DO)
	return m
}
