// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newModelField(db *gorm.DB, opts ...gen.DOOption) modelField {
	_modelField := modelField{}

	_modelField.modelFieldDo.UseDB(db, opts...)
	_modelField.modelFieldDo.UseModel(&gen_model.ModelField{})

	tableName := _modelField.modelFieldDo.TableName()
	_modelField.ALL = field.NewAsterisk(tableName)
	_modelField.Fieldid = field.NewInt32(tableName, "fieldid")
	_modelField.Modelid = field.NewInt32(tableName, "modelid")
	_modelField.Field = field.NewString(tableName, "field")
	_modelField.Name = field.NewString(tableName, "name")
	_modelField.Formtype = field.NewString(tableName, "formtype")
	_modelField.Width = field.NewInt32(tableName, "width")
	_modelField.Height = field.NewInt32(tableName, "height")
	_modelField.Initial = field.NewString(tableName, "initial")
	_modelField.Explain = field.NewString(tableName, "explain")
	_modelField.Sort = field.NewInt32(tableName, "sort")
	_modelField.IsFixed = field.NewBool(tableName, "is_fixed")

	_modelField.fillFieldMap()

	return _modelField
}

type modelField struct {
	modelFieldDo

	ALL      field.Asterisk
	Fieldid  field.Int32
	Modelid  field.Int32
	Field    field.String
	Name     field.String
	Formtype field.String
	Width    field.Int32
	Height   field.Int32
	Initial  field.String
	Explain  field.String
	Sort     field.Int32
	IsFixed  field.Bool

	fieldMap map[string]field.Expr
}

func (m modelField) Table(newTableName string) *modelField {
	m.modelFieldDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelField) As(alias string) *modelField {
	m.modelFieldDo.DO = *(m.modelFieldDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelField) updateTableName(table string) *modelField {
	m.ALL = field.NewAsterisk(table)
	m.Fieldid = field.NewInt32(table, "fieldid")
	m.Modelid = field.NewInt32(table, "modelid")
	m.Field = field.NewString(table, "field")
	m.Name = field.NewString(table, "name")
	m.Formtype = field.NewString(table, "formtype")
	m.Width = field.NewInt32(table, "width")
	m.Height = field.NewInt32(table, "height")
	m.Initial = field.NewString(table, "initial")
	m.Explain = field.NewString(table, "explain")
	m.Sort = field.NewInt32(table, "sort")
	m.IsFixed = field.NewBool(table, "is_fixed")

	m.fillFieldMap()

	return m
}

func (m *modelField) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelField) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["fieldid"] = m.Fieldid
	m.fieldMap["modelid"] = m.Modelid
	m.fieldMap["field"] = m.Field
	m.fieldMap["name"] = m.Name
	m.fieldMap["formtype"] = m.Formtype
	m.fieldMap["width"] = m.Width
	m.fieldMap["height"] = m.Height
	m.fieldMap["initial"] = m.Initial
	m.fieldMap["explain"] = m.Explain
	m.fieldMap["sort"] = m.Sort
	m.fieldMap["is_fixed"] = m.IsFixed
}

func (m modelField) clone(db *gorm.DB) modelField {
	m.modelFieldDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelField) replaceDB(db *gorm.DB) modelField {
	m.modelFieldDo.ReplaceDB(db)
	return m
}

type modelFieldDo struct{ gen.DO }

type IModelFieldDo interface {
	gen.SubQuery
	Debug() IModelFieldDo
	WithContext(ctx context.Context) IModelFieldDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IModelFieldDo
	WriteDB() IModelFieldDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IModelFieldDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IModelFieldDo
	Not(conds ...gen.Condition) IModelFieldDo
	Or(conds ...gen.Condition) IModelFieldDo
	Select(conds ...field.Expr) IModelFieldDo
	Where(conds ...gen.Condition) IModelFieldDo
	Order(conds ...field.Expr) IModelFieldDo
	Distinct(cols ...field.Expr) IModelFieldDo
	Omit(cols ...field.Expr) IModelFieldDo
	Join(table schema.Tabler, on ...field.Expr) IModelFieldDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IModelFieldDo
	RightJoin(table schema.Tabler, on ...field.Expr) IModelFieldDo
	Group(cols ...field.Expr) IModelFieldDo
	Having(conds ...gen.Condition) IModelFieldDo
	Limit(limit int) IModelFieldDo
	Offset(offset int) IModelFieldDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IModelFieldDo
	Unscoped() IModelFieldDo
	Create(values ...*gen_model.ModelField) error
	CreateInBatches(values []*gen_model.ModelField, batchSize int) error
	Save(values ...*gen_model.ModelField) error
	First() (*gen_model.ModelField, error)
	Take() (*gen_model.ModelField, error)
	Last() (*gen_model.ModelField, error)
	Find() ([]*gen_model.ModelField, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.ModelField, err error)
	FindInBatches(result *[]*gen_model.ModelField, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.ModelField) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IModelFieldDo
	Assign(attrs ...field.AssignExpr) IModelFieldDo
	Joins(fields ...field.RelationField) IModelFieldDo
	Preload(fields ...field.RelationField) IModelFieldDo
	FirstOrInit() (*gen_model.ModelField, error)
	FirstOrCreate() (*gen_model.ModelField, error)
	FindByPage(offset int, limit int) (result []*gen_model.ModelField, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IModelFieldDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m modelFieldDo) Debug() IModelFieldDo {
	return m.withDO(m.DO.Debug())
}

func (m modelFieldDo) WithContext(ctx context.Context) IModelFieldDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelFieldDo) ReadDB() IModelFieldDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelFieldDo) WriteDB() IModelFieldDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelFieldDo) Session(config *gorm.Session) IModelFieldDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelFieldDo) Clauses(conds ...clause.Expression) IModelFieldDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelFieldDo) Returning(value interface{}, columns ...string) IModelFieldDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelFieldDo) Not(conds ...gen.Condition) IModelFieldDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelFieldDo) Or(conds ...gen.Condition) IModelFieldDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelFieldDo) Select(conds ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelFieldDo) Where(conds ...gen.Condition) IModelFieldDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelFieldDo) Order(conds ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelFieldDo) Distinct(cols ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelFieldDo) Omit(cols ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelFieldDo) Join(table schema.Tabler, on ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelFieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelFieldDo) RightJoin(table schema.Tabler, on ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelFieldDo) Group(cols ...field.Expr) IModelFieldDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelFieldDo) Having(conds ...gen.Condition) IModelFieldDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelFieldDo) Limit(limit int) IModelFieldDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelFieldDo) Offset(offset int) IModelFieldDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelFieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IModelFieldDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelFieldDo) Unscoped() IModelFieldDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelFieldDo) Create(values ...*gen_model.ModelField) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelFieldDo) CreateInBatches(values []*gen_model.ModelField, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelFieldDo) Save(values ...*gen_model.ModelField) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelFieldDo) First() (*gen_model.ModelField, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.ModelField), nil
	}
}

func (m modelFieldDo) Take() (*gen_model.ModelField, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.ModelField), nil
	}
}

func (m modelFieldDo) Last() (*gen_model.ModelField, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.ModelField), nil
	}
}

func (m modelFieldDo) Find() ([]*gen_model.ModelField, error) {
	result, err := m.DO.Find()
	return result.([]*gen_model.ModelField), err
}

func (m modelFieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.ModelField, err error) {
	buf := make([]*gen_model.ModelField, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelFieldDo) FindInBatches(result *[]*gen_model.ModelField, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelFieldDo) Attrs(attrs ...field.AssignExpr) IModelFieldDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelFieldDo) Assign(attrs ...field.AssignExpr) IModelFieldDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelFieldDo) Joins(fields ...field.RelationField) IModelFieldDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelFieldDo) Preload(fields ...field.RelationField) IModelFieldDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelFieldDo) FirstOrInit() (*gen_model.ModelField, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.ModelField), nil
	}
}

func (m modelFieldDo) FirstOrCreate() (*gen_model.ModelField, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.ModelField), nil
	}
}

func (m modelFieldDo) FindByPage(offset int, limit int) (result []*gen_model.ModelField, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelFieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelFieldDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelFieldDo) Delete(models ...*gen_model.ModelField) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelFieldDo) withDO(do gen.Dao) *modelFieldDo {
	m.DO = *do.(*gen.DO)
	return m
}
