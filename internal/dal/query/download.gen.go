// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newDownload(db *gorm.DB, opts ...gen.DOOption) download {
	_download := download{}

	_download.downloadDo.UseDB(db, opts...)
	_download.downloadDo.UseModel(&gen_model.Download{})

	tableName := _download.downloadDo.TableName()
	_download.ALL = field.NewAsterisk(tableName)
	_download.Contentid = field.NewInt32(tableName, "contentid")
	_download.Files = field.NewString(tableName, "files")
	_download.Content = field.NewString(tableName, "content")

	_download.fillFieldMap()

	return _download
}

type download struct {
	downloadDo

	ALL       field.Asterisk
	Contentid field.Int32
	Files     field.String
	Content   field.String

	fieldMap map[string]field.Expr
}

func (d download) Table(newTableName string) *download {
	d.downloadDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d download) As(alias string) *download {
	d.downloadDo.DO = *(d.downloadDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *download) updateTableName(table string) *download {
	d.ALL = field.NewAsterisk(table)
	d.Contentid = field.NewInt32(table, "contentid")
	d.Files = field.NewString(table, "files")
	d.Content = field.NewString(table, "content")

	d.fillFieldMap()

	return d
}

func (d *download) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *download) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["contentid"] = d.Contentid
	d.fieldMap["files"] = d.Files
	d.fieldMap["content"] = d.Content
}

func (d download) clone(db *gorm.DB) download {
	d.downloadDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d download) replaceDB(db *gorm.DB) download {
	d.downloadDo.ReplaceDB(db)
	return d
}

type downloadDo struct{ gen.DO }

type IDownloadDo interface {
	gen.SubQuery
	Debug() IDownloadDo
	WithContext(ctx context.Context) IDownloadDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDownloadDo
	WriteDB() IDownloadDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDownloadDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDownloadDo
	Not(conds ...gen.Condition) IDownloadDo
	Or(conds ...gen.Condition) IDownloadDo
	Select(conds ...field.Expr) IDownloadDo
	Where(conds ...gen.Condition) IDownloadDo
	Order(conds ...field.Expr) IDownloadDo
	Distinct(cols ...field.Expr) IDownloadDo
	Omit(cols ...field.Expr) IDownloadDo
	Join(table schema.Tabler, on ...field.Expr) IDownloadDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDownloadDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDownloadDo
	Group(cols ...field.Expr) IDownloadDo
	Having(conds ...gen.Condition) IDownloadDo
	Limit(limit int) IDownloadDo
	Offset(offset int) IDownloadDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDownloadDo
	Unscoped() IDownloadDo
	Create(values ...*gen_model.Download) error
	CreateInBatches(values []*gen_model.Download, batchSize int) error
	Save(values ...*gen_model.Download) error
	First() (*gen_model.Download, error)
	Take() (*gen_model.Download, error)
	Last() (*gen_model.Download, error)
	Find() ([]*gen_model.Download, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Download, err error)
	FindInBatches(result *[]*gen_model.Download, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Download) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDownloadDo
	Assign(attrs ...field.AssignExpr) IDownloadDo
	Joins(fields ...field.RelationField) IDownloadDo
	Preload(fields ...field.RelationField) IDownloadDo
	FirstOrInit() (*gen_model.Download, error)
	FirstOrCreate() (*gen_model.Download, error)
	FindByPage(offset int, limit int) (result []*gen_model.Download, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDownloadDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d downloadDo) Debug() IDownloadDo {
	return d.withDO(d.DO.Debug())
}

func (d downloadDo) WithContext(ctx context.Context) IDownloadDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d downloadDo) ReadDB() IDownloadDo {
	return d.Clauses(dbresolver.Read)
}

func (d downloadDo) WriteDB() IDownloadDo {
	return d.Clauses(dbresolver.Write)
}

func (d downloadDo) Session(config *gorm.Session) IDownloadDo {
	return d.withDO(d.DO.Session(config))
}

func (d downloadDo) Clauses(conds ...clause.Expression) IDownloadDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d downloadDo) Returning(value interface{}, columns ...string) IDownloadDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d downloadDo) Not(conds ...gen.Condition) IDownloadDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d downloadDo) Or(conds ...gen.Condition) IDownloadDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d downloadDo) Select(conds ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d downloadDo) Where(conds ...gen.Condition) IDownloadDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d downloadDo) Order(conds ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d downloadDo) Distinct(cols ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d downloadDo) Omit(cols ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d downloadDo) Join(table schema.Tabler, on ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d downloadDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d downloadDo) RightJoin(table schema.Tabler, on ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d downloadDo) Group(cols ...field.Expr) IDownloadDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d downloadDo) Having(conds ...gen.Condition) IDownloadDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d downloadDo) Limit(limit int) IDownloadDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d downloadDo) Offset(offset int) IDownloadDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d downloadDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDownloadDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d downloadDo) Unscoped() IDownloadDo {
	return d.withDO(d.DO.Unscoped())
}

func (d downloadDo) Create(values ...*gen_model.Download) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d downloadDo) CreateInBatches(values []*gen_model.Download, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d downloadDo) Save(values ...*gen_model.Download) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d downloadDo) First() (*gen_model.Download, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Download), nil
	}
}

func (d downloadDo) Take() (*gen_model.Download, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Download), nil
	}
}

func (d downloadDo) Last() (*gen_model.Download, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Download), nil
	}
}

func (d downloadDo) Find() ([]*gen_model.Download, error) {
	result, err := d.DO.Find()
	return result.([]*gen_model.Download), err
}

func (d downloadDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Download, err error) {
	buf := make([]*gen_model.Download, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d downloadDo) FindInBatches(result *[]*gen_model.Download, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d downloadDo) Attrs(attrs ...field.AssignExpr) IDownloadDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d downloadDo) Assign(attrs ...field.AssignExpr) IDownloadDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d downloadDo) Joins(fields ...field.RelationField) IDownloadDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d downloadDo) Preload(fields ...field.RelationField) IDownloadDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d downloadDo) FirstOrInit() (*gen_model.Download, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Download), nil
	}
}

func (d downloadDo) FirstOrCreate() (*gen_model.Download, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Download), nil
	}
}

func (d downloadDo) FindByPage(offset int, limit int) (result []*gen_model.Download, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d downloadDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d downloadDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d downloadDo) Delete(models ...*gen_model.Download) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *downloadDo) withDO(do gen.Dao) *downloadDo {
	d.DO = *do.(*gen.DO)
	return d
}
