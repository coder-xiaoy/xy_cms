// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newMemberGroup(db *gorm.DB, opts ...gen.DOOption) memberGroup {
	_memberGroup := memberGroup{}

	_memberGroup.memberGroupDo.UseDB(db, opts...)
	_memberGroup.memberGroupDo.UseModel(&gen_model.MemberGroup{})

	tableName := _memberGroup.memberGroupDo.TableName()
	_memberGroup.ALL = field.NewAsterisk(tableName)
	_memberGroup.ID = field.NewInt32(tableName, "id")
	_memberGroup.Name = field.NewString(tableName, "name")

	_memberGroup.fillFieldMap()

	return _memberGroup
}

type memberGroup struct {
	memberGroupDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (m memberGroup) Table(newTableName string) *memberGroup {
	m.memberGroupDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberGroup) As(alias string) *memberGroup {
	m.memberGroupDo.DO = *(m.memberGroupDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberGroup) updateTableName(table string) *memberGroup {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")

	m.fillFieldMap()

	return m
}

func (m *memberGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberGroup) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
}

func (m memberGroup) clone(db *gorm.DB) memberGroup {
	m.memberGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberGroup) replaceDB(db *gorm.DB) memberGroup {
	m.memberGroupDo.ReplaceDB(db)
	return m
}

type memberGroupDo struct{ gen.DO }

type IMemberGroupDo interface {
	gen.SubQuery
	Debug() IMemberGroupDo
	WithContext(ctx context.Context) IMemberGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberGroupDo
	WriteDB() IMemberGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberGroupDo
	Not(conds ...gen.Condition) IMemberGroupDo
	Or(conds ...gen.Condition) IMemberGroupDo
	Select(conds ...field.Expr) IMemberGroupDo
	Where(conds ...gen.Condition) IMemberGroupDo
	Order(conds ...field.Expr) IMemberGroupDo
	Distinct(cols ...field.Expr) IMemberGroupDo
	Omit(cols ...field.Expr) IMemberGroupDo
	Join(table schema.Tabler, on ...field.Expr) IMemberGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberGroupDo
	Group(cols ...field.Expr) IMemberGroupDo
	Having(conds ...gen.Condition) IMemberGroupDo
	Limit(limit int) IMemberGroupDo
	Offset(offset int) IMemberGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberGroupDo
	Unscoped() IMemberGroupDo
	Create(values ...*gen_model.MemberGroup) error
	CreateInBatches(values []*gen_model.MemberGroup, batchSize int) error
	Save(values ...*gen_model.MemberGroup) error
	First() (*gen_model.MemberGroup, error)
	Take() (*gen_model.MemberGroup, error)
	Last() (*gen_model.MemberGroup, error)
	Find() ([]*gen_model.MemberGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.MemberGroup, err error)
	FindInBatches(result *[]*gen_model.MemberGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.MemberGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberGroupDo
	Assign(attrs ...field.AssignExpr) IMemberGroupDo
	Joins(fields ...field.RelationField) IMemberGroupDo
	Preload(fields ...field.RelationField) IMemberGroupDo
	FirstOrInit() (*gen_model.MemberGroup, error)
	FirstOrCreate() (*gen_model.MemberGroup, error)
	FindByPage(offset int, limit int) (result []*gen_model.MemberGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberGroupDo) Debug() IMemberGroupDo {
	return m.withDO(m.DO.Debug())
}

func (m memberGroupDo) WithContext(ctx context.Context) IMemberGroupDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberGroupDo) ReadDB() IMemberGroupDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberGroupDo) WriteDB() IMemberGroupDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberGroupDo) Session(config *gorm.Session) IMemberGroupDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberGroupDo) Clauses(conds ...clause.Expression) IMemberGroupDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberGroupDo) Returning(value interface{}, columns ...string) IMemberGroupDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberGroupDo) Not(conds ...gen.Condition) IMemberGroupDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberGroupDo) Or(conds ...gen.Condition) IMemberGroupDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberGroupDo) Select(conds ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberGroupDo) Where(conds ...gen.Condition) IMemberGroupDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberGroupDo) Order(conds ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberGroupDo) Distinct(cols ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberGroupDo) Omit(cols ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberGroupDo) Join(table schema.Tabler, on ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberGroupDo) Group(cols ...field.Expr) IMemberGroupDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberGroupDo) Having(conds ...gen.Condition) IMemberGroupDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberGroupDo) Limit(limit int) IMemberGroupDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberGroupDo) Offset(offset int) IMemberGroupDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberGroupDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberGroupDo) Unscoped() IMemberGroupDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberGroupDo) Create(values ...*gen_model.MemberGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberGroupDo) CreateInBatches(values []*gen_model.MemberGroup, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberGroupDo) Save(values ...*gen_model.MemberGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberGroupDo) First() (*gen_model.MemberGroup, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberGroup), nil
	}
}

func (m memberGroupDo) Take() (*gen_model.MemberGroup, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberGroup), nil
	}
}

func (m memberGroupDo) Last() (*gen_model.MemberGroup, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberGroup), nil
	}
}

func (m memberGroupDo) Find() ([]*gen_model.MemberGroup, error) {
	result, err := m.DO.Find()
	return result.([]*gen_model.MemberGroup), err
}

func (m memberGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.MemberGroup, err error) {
	buf := make([]*gen_model.MemberGroup, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberGroupDo) FindInBatches(result *[]*gen_model.MemberGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberGroupDo) Attrs(attrs ...field.AssignExpr) IMemberGroupDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberGroupDo) Assign(attrs ...field.AssignExpr) IMemberGroupDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberGroupDo) Joins(fields ...field.RelationField) IMemberGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberGroupDo) Preload(fields ...field.RelationField) IMemberGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberGroupDo) FirstOrInit() (*gen_model.MemberGroup, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberGroup), nil
	}
}

func (m memberGroupDo) FirstOrCreate() (*gen_model.MemberGroup, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberGroup), nil
	}
}

func (m memberGroupDo) FindByPage(offset int, limit int) (result []*gen_model.MemberGroup, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberGroupDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberGroupDo) Delete(models ...*gen_model.MemberGroup) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberGroupDo) withDO(do gen.Dao) *memberGroupDo {
	m.DO = *do.(*gen.DO)
	return m
}
