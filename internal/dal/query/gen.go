// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	Admin       *admin
	AdminGroup  *adminGroup
	Block       *block
	Category    *category
	Config      *config
	Content     *content
	Download    *download
	Flash       *flash
	Form        *form
	FormField   *formField
	Job         *job
	Keyword     *keyword
	Link        *link
	Member      *member
	MemberField *memberField
	MemberGroup *memberGroup
	Menu        *menu
	Message     *message
	Model       *model
	ModelField  *modelField
	News        *news
	Product     *product
	Qq          *qq
	Resume      *resume
	Single      *single
	Urlrule     *urlrule
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	AdminGroup = &Q.AdminGroup
	Block = &Q.Block
	Category = &Q.Category
	Config = &Q.Config
	Content = &Q.Content
	Download = &Q.Download
	Flash = &Q.Flash
	Form = &Q.Form
	FormField = &Q.FormField
	Job = &Q.Job
	Keyword = &Q.Keyword
	Link = &Q.Link
	Member = &Q.Member
	MemberField = &Q.MemberField
	MemberGroup = &Q.MemberGroup
	Menu = &Q.Menu
	Message = &Q.Message
	Model = &Q.Model
	ModelField = &Q.ModelField
	News = &Q.News
	Product = &Q.Product
	Qq = &Q.Qq
	Resume = &Q.Resume
	Single = &Q.Single
	Urlrule = &Q.Urlrule
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Admin:       newAdmin(db, opts...),
		AdminGroup:  newAdminGroup(db, opts...),
		Block:       newBlock(db, opts...),
		Category:    newCategory(db, opts...),
		Config:      newConfig(db, opts...),
		Content:     newContent(db, opts...),
		Download:    newDownload(db, opts...),
		Flash:       newFlash(db, opts...),
		Form:        newForm(db, opts...),
		FormField:   newFormField(db, opts...),
		Job:         newJob(db, opts...),
		Keyword:     newKeyword(db, opts...),
		Link:        newLink(db, opts...),
		Member:      newMember(db, opts...),
		MemberField: newMemberField(db, opts...),
		MemberGroup: newMemberGroup(db, opts...),
		Menu:        newMenu(db, opts...),
		Message:     newMessage(db, opts...),
		Model:       newModel(db, opts...),
		ModelField:  newModelField(db, opts...),
		News:        newNews(db, opts...),
		Product:     newProduct(db, opts...),
		Qq:          newQq(db, opts...),
		Resume:      newResume(db, opts...),
		Single:      newSingle(db, opts...),
		Urlrule:     newUrlrule(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin       admin
	AdminGroup  adminGroup
	Block       block
	Category    category
	Config      config
	Content     content
	Download    download
	Flash       flash
	Form        form
	FormField   formField
	Job         job
	Keyword     keyword
	Link        link
	Member      member
	MemberField memberField
	MemberGroup memberGroup
	Menu        menu
	Message     message
	Model       model
	ModelField  modelField
	News        news
	Product     product
	Qq          qq
	Resume      resume
	Single      single
	Urlrule     urlrule
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Admin:       q.Admin.clone(db),
		AdminGroup:  q.AdminGroup.clone(db),
		Block:       q.Block.clone(db),
		Category:    q.Category.clone(db),
		Config:      q.Config.clone(db),
		Content:     q.Content.clone(db),
		Download:    q.Download.clone(db),
		Flash:       q.Flash.clone(db),
		Form:        q.Form.clone(db),
		FormField:   q.FormField.clone(db),
		Job:         q.Job.clone(db),
		Keyword:     q.Keyword.clone(db),
		Link:        q.Link.clone(db),
		Member:      q.Member.clone(db),
		MemberField: q.MemberField.clone(db),
		MemberGroup: q.MemberGroup.clone(db),
		Menu:        q.Menu.clone(db),
		Message:     q.Message.clone(db),
		Model:       q.Model.clone(db),
		ModelField:  q.ModelField.clone(db),
		News:        q.News.clone(db),
		Product:     q.Product.clone(db),
		Qq:          q.Qq.clone(db),
		Resume:      q.Resume.clone(db),
		Single:      q.Single.clone(db),
		Urlrule:     q.Urlrule.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Admin:       q.Admin.replaceDB(db),
		AdminGroup:  q.AdminGroup.replaceDB(db),
		Block:       q.Block.replaceDB(db),
		Category:    q.Category.replaceDB(db),
		Config:      q.Config.replaceDB(db),
		Content:     q.Content.replaceDB(db),
		Download:    q.Download.replaceDB(db),
		Flash:       q.Flash.replaceDB(db),
		Form:        q.Form.replaceDB(db),
		FormField:   q.FormField.replaceDB(db),
		Job:         q.Job.replaceDB(db),
		Keyword:     q.Keyword.replaceDB(db),
		Link:        q.Link.replaceDB(db),
		Member:      q.Member.replaceDB(db),
		MemberField: q.MemberField.replaceDB(db),
		MemberGroup: q.MemberGroup.replaceDB(db),
		Menu:        q.Menu.replaceDB(db),
		Message:     q.Message.replaceDB(db),
		Model:       q.Model.replaceDB(db),
		ModelField:  q.ModelField.replaceDB(db),
		News:        q.News.replaceDB(db),
		Product:     q.Product.replaceDB(db),
		Qq:          q.Qq.replaceDB(db),
		Resume:      q.Resume.replaceDB(db),
		Single:      q.Single.replaceDB(db),
		Urlrule:     q.Urlrule.replaceDB(db),
	}
}

type queryCtx struct {
	Admin       IAdminDo
	AdminGroup  IAdminGroupDo
	Block       IBlockDo
	Category    ICategoryDo
	Config      IConfigDo
	Content     IContentDo
	Download    IDownloadDo
	Flash       IFlashDo
	Form        IFormDo
	FormField   IFormFieldDo
	Job         IJobDo
	Keyword     IKeywordDo
	Link        ILinkDo
	Member      IMemberDo
	MemberField IMemberFieldDo
	MemberGroup IMemberGroupDo
	Menu        IMenuDo
	Message     IMessageDo
	Model       IModelDo
	ModelField  IModelFieldDo
	News        INewsDo
	Product     IProductDo
	Qq          IQqDo
	Resume      IResumeDo
	Single      ISingleDo
	Urlrule     IUrlruleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:       q.Admin.WithContext(ctx),
		AdminGroup:  q.AdminGroup.WithContext(ctx),
		Block:       q.Block.WithContext(ctx),
		Category:    q.Category.WithContext(ctx),
		Config:      q.Config.WithContext(ctx),
		Content:     q.Content.WithContext(ctx),
		Download:    q.Download.WithContext(ctx),
		Flash:       q.Flash.WithContext(ctx),
		Form:        q.Form.WithContext(ctx),
		FormField:   q.FormField.WithContext(ctx),
		Job:         q.Job.WithContext(ctx),
		Keyword:     q.Keyword.WithContext(ctx),
		Link:        q.Link.WithContext(ctx),
		Member:      q.Member.WithContext(ctx),
		MemberField: q.MemberField.WithContext(ctx),
		MemberGroup: q.MemberGroup.WithContext(ctx),
		Menu:        q.Menu.WithContext(ctx),
		Message:     q.Message.WithContext(ctx),
		Model:       q.Model.WithContext(ctx),
		ModelField:  q.ModelField.WithContext(ctx),
		News:        q.News.WithContext(ctx),
		Product:     q.Product.WithContext(ctx),
		Qq:          q.Qq.WithContext(ctx),
		Resume:      q.Resume.WithContext(ctx),
		Single:      q.Single.WithContext(ctx),
		Urlrule:     q.Urlrule.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
