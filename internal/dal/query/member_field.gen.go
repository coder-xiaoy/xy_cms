// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newMemberField(db *gorm.DB, opts ...gen.DOOption) memberField {
	_memberField := memberField{}

	_memberField.memberFieldDo.UseDB(db, opts...)
	_memberField.memberFieldDo.UseModel(&gen_model.MemberField{})

	tableName := _memberField.memberFieldDo.TableName()
	_memberField.ALL = field.NewAsterisk(tableName)
	_memberField.Fieldid = field.NewInt32(tableName, "fieldid")
	_memberField.Field = field.NewString(tableName, "field")
	_memberField.Name = field.NewString(tableName, "name")
	_memberField.Formtype = field.NewString(tableName, "formtype")
	_memberField.Width = field.NewInt32(tableName, "width")
	_memberField.Height = field.NewInt32(tableName, "height")
	_memberField.Initial = field.NewString(tableName, "initial")
	_memberField.Explain = field.NewString(tableName, "explain")
	_memberField.Sort = field.NewInt32(tableName, "sort")
	_memberField.IsFixed = field.NewBool(tableName, "is_fixed")
	_memberField.IsRegister = field.NewBool(tableName, "is_register")

	_memberField.fillFieldMap()

	return _memberField
}

type memberField struct {
	memberFieldDo

	ALL        field.Asterisk
	Fieldid    field.Int32
	Field      field.String
	Name       field.String
	Formtype   field.String
	Width      field.Int32
	Height     field.Int32
	Initial    field.String
	Explain    field.String
	Sort       field.Int32
	IsFixed    field.Bool
	IsRegister field.Bool

	fieldMap map[string]field.Expr
}

func (m memberField) Table(newTableName string) *memberField {
	m.memberFieldDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberField) As(alias string) *memberField {
	m.memberFieldDo.DO = *(m.memberFieldDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberField) updateTableName(table string) *memberField {
	m.ALL = field.NewAsterisk(table)
	m.Fieldid = field.NewInt32(table, "fieldid")
	m.Field = field.NewString(table, "field")
	m.Name = field.NewString(table, "name")
	m.Formtype = field.NewString(table, "formtype")
	m.Width = field.NewInt32(table, "width")
	m.Height = field.NewInt32(table, "height")
	m.Initial = field.NewString(table, "initial")
	m.Explain = field.NewString(table, "explain")
	m.Sort = field.NewInt32(table, "sort")
	m.IsFixed = field.NewBool(table, "is_fixed")
	m.IsRegister = field.NewBool(table, "is_register")

	m.fillFieldMap()

	return m
}

func (m *memberField) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberField) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["fieldid"] = m.Fieldid
	m.fieldMap["field"] = m.Field
	m.fieldMap["name"] = m.Name
	m.fieldMap["formtype"] = m.Formtype
	m.fieldMap["width"] = m.Width
	m.fieldMap["height"] = m.Height
	m.fieldMap["initial"] = m.Initial
	m.fieldMap["explain"] = m.Explain
	m.fieldMap["sort"] = m.Sort
	m.fieldMap["is_fixed"] = m.IsFixed
	m.fieldMap["is_register"] = m.IsRegister
}

func (m memberField) clone(db *gorm.DB) memberField {
	m.memberFieldDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberField) replaceDB(db *gorm.DB) memberField {
	m.memberFieldDo.ReplaceDB(db)
	return m
}

type memberFieldDo struct{ gen.DO }

type IMemberFieldDo interface {
	gen.SubQuery
	Debug() IMemberFieldDo
	WithContext(ctx context.Context) IMemberFieldDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberFieldDo
	WriteDB() IMemberFieldDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberFieldDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberFieldDo
	Not(conds ...gen.Condition) IMemberFieldDo
	Or(conds ...gen.Condition) IMemberFieldDo
	Select(conds ...field.Expr) IMemberFieldDo
	Where(conds ...gen.Condition) IMemberFieldDo
	Order(conds ...field.Expr) IMemberFieldDo
	Distinct(cols ...field.Expr) IMemberFieldDo
	Omit(cols ...field.Expr) IMemberFieldDo
	Join(table schema.Tabler, on ...field.Expr) IMemberFieldDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberFieldDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberFieldDo
	Group(cols ...field.Expr) IMemberFieldDo
	Having(conds ...gen.Condition) IMemberFieldDo
	Limit(limit int) IMemberFieldDo
	Offset(offset int) IMemberFieldDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberFieldDo
	Unscoped() IMemberFieldDo
	Create(values ...*gen_model.MemberField) error
	CreateInBatches(values []*gen_model.MemberField, batchSize int) error
	Save(values ...*gen_model.MemberField) error
	First() (*gen_model.MemberField, error)
	Take() (*gen_model.MemberField, error)
	Last() (*gen_model.MemberField, error)
	Find() ([]*gen_model.MemberField, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.MemberField, err error)
	FindInBatches(result *[]*gen_model.MemberField, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.MemberField) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberFieldDo
	Assign(attrs ...field.AssignExpr) IMemberFieldDo
	Joins(fields ...field.RelationField) IMemberFieldDo
	Preload(fields ...field.RelationField) IMemberFieldDo
	FirstOrInit() (*gen_model.MemberField, error)
	FirstOrCreate() (*gen_model.MemberField, error)
	FindByPage(offset int, limit int) (result []*gen_model.MemberField, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberFieldDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberFieldDo) Debug() IMemberFieldDo {
	return m.withDO(m.DO.Debug())
}

func (m memberFieldDo) WithContext(ctx context.Context) IMemberFieldDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberFieldDo) ReadDB() IMemberFieldDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberFieldDo) WriteDB() IMemberFieldDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberFieldDo) Session(config *gorm.Session) IMemberFieldDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberFieldDo) Clauses(conds ...clause.Expression) IMemberFieldDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberFieldDo) Returning(value interface{}, columns ...string) IMemberFieldDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberFieldDo) Not(conds ...gen.Condition) IMemberFieldDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberFieldDo) Or(conds ...gen.Condition) IMemberFieldDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberFieldDo) Select(conds ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberFieldDo) Where(conds ...gen.Condition) IMemberFieldDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberFieldDo) Order(conds ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberFieldDo) Distinct(cols ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberFieldDo) Omit(cols ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberFieldDo) Join(table schema.Tabler, on ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberFieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberFieldDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberFieldDo) Group(cols ...field.Expr) IMemberFieldDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberFieldDo) Having(conds ...gen.Condition) IMemberFieldDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberFieldDo) Limit(limit int) IMemberFieldDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberFieldDo) Offset(offset int) IMemberFieldDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberFieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberFieldDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberFieldDo) Unscoped() IMemberFieldDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberFieldDo) Create(values ...*gen_model.MemberField) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberFieldDo) CreateInBatches(values []*gen_model.MemberField, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberFieldDo) Save(values ...*gen_model.MemberField) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberFieldDo) First() (*gen_model.MemberField, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberField), nil
	}
}

func (m memberFieldDo) Take() (*gen_model.MemberField, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberField), nil
	}
}

func (m memberFieldDo) Last() (*gen_model.MemberField, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberField), nil
	}
}

func (m memberFieldDo) Find() ([]*gen_model.MemberField, error) {
	result, err := m.DO.Find()
	return result.([]*gen_model.MemberField), err
}

func (m memberFieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.MemberField, err error) {
	buf := make([]*gen_model.MemberField, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberFieldDo) FindInBatches(result *[]*gen_model.MemberField, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberFieldDo) Attrs(attrs ...field.AssignExpr) IMemberFieldDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberFieldDo) Assign(attrs ...field.AssignExpr) IMemberFieldDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberFieldDo) Joins(fields ...field.RelationField) IMemberFieldDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberFieldDo) Preload(fields ...field.RelationField) IMemberFieldDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberFieldDo) FirstOrInit() (*gen_model.MemberField, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberField), nil
	}
}

func (m memberFieldDo) FirstOrCreate() (*gen_model.MemberField, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MemberField), nil
	}
}

func (m memberFieldDo) FindByPage(offset int, limit int) (result []*gen_model.MemberField, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberFieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberFieldDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberFieldDo) Delete(models ...*gen_model.MemberField) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberFieldDo) withDO(do gen.Dao) *memberFieldDo {
	m.DO = *do.(*gen.DO)
	return m
}
