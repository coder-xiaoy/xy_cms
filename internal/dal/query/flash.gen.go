// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newFlash(db *gorm.DB, opts ...gen.DOOption) flash {
	_flash := flash{}

	_flash.flashDo.UseDB(db, opts...)
	_flash.flashDo.UseModel(&gen_model.Flash{})

	tableName := _flash.flashDo.TableName()
	_flash.ALL = field.NewAsterisk(tableName)
	_flash.ID = field.NewInt32(tableName, "id")
	_flash.Title = field.NewString(tableName, "title")
	_flash.URL = field.NewString(tableName, "url")
	_flash.Thumb = field.NewString(tableName, "thumb")
	_flash.IsLock = field.NewBool(tableName, "is_lock")
	_flash.Type = field.NewInt32(tableName, "type")
	_flash.Sort = field.NewInt32(tableName, "sort")
	_flash.Inputtime = field.NewInt32(tableName, "inputtime")
	_flash.Catid = field.NewInt32(tableName, "catid")

	_flash.fillFieldMap()

	return _flash
}

type flash struct {
	flashDo

	ALL       field.Asterisk
	ID        field.Int32
	Title     field.String
	URL       field.String
	Thumb     field.String
	IsLock    field.Bool
	Type      field.Int32
	Sort      field.Int32
	Inputtime field.Int32
	Catid     field.Int32

	fieldMap map[string]field.Expr
}

func (f flash) Table(newTableName string) *flash {
	f.flashDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flash) As(alias string) *flash {
	f.flashDo.DO = *(f.flashDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flash) updateTableName(table string) *flash {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Title = field.NewString(table, "title")
	f.URL = field.NewString(table, "url")
	f.Thumb = field.NewString(table, "thumb")
	f.IsLock = field.NewBool(table, "is_lock")
	f.Type = field.NewInt32(table, "type")
	f.Sort = field.NewInt32(table, "sort")
	f.Inputtime = field.NewInt32(table, "inputtime")
	f.Catid = field.NewInt32(table, "catid")

	f.fillFieldMap()

	return f
}

func (f *flash) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flash) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["title"] = f.Title
	f.fieldMap["url"] = f.URL
	f.fieldMap["thumb"] = f.Thumb
	f.fieldMap["is_lock"] = f.IsLock
	f.fieldMap["type"] = f.Type
	f.fieldMap["sort"] = f.Sort
	f.fieldMap["inputtime"] = f.Inputtime
	f.fieldMap["catid"] = f.Catid
}

func (f flash) clone(db *gorm.DB) flash {
	f.flashDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flash) replaceDB(db *gorm.DB) flash {
	f.flashDo.ReplaceDB(db)
	return f
}

type flashDo struct{ gen.DO }

type IFlashDo interface {
	gen.SubQuery
	Debug() IFlashDo
	WithContext(ctx context.Context) IFlashDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFlashDo
	WriteDB() IFlashDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFlashDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFlashDo
	Not(conds ...gen.Condition) IFlashDo
	Or(conds ...gen.Condition) IFlashDo
	Select(conds ...field.Expr) IFlashDo
	Where(conds ...gen.Condition) IFlashDo
	Order(conds ...field.Expr) IFlashDo
	Distinct(cols ...field.Expr) IFlashDo
	Omit(cols ...field.Expr) IFlashDo
	Join(table schema.Tabler, on ...field.Expr) IFlashDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFlashDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFlashDo
	Group(cols ...field.Expr) IFlashDo
	Having(conds ...gen.Condition) IFlashDo
	Limit(limit int) IFlashDo
	Offset(offset int) IFlashDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFlashDo
	Unscoped() IFlashDo
	Create(values ...*gen_model.Flash) error
	CreateInBatches(values []*gen_model.Flash, batchSize int) error
	Save(values ...*gen_model.Flash) error
	First() (*gen_model.Flash, error)
	Take() (*gen_model.Flash, error)
	Last() (*gen_model.Flash, error)
	Find() ([]*gen_model.Flash, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Flash, err error)
	FindInBatches(result *[]*gen_model.Flash, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Flash) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFlashDo
	Assign(attrs ...field.AssignExpr) IFlashDo
	Joins(fields ...field.RelationField) IFlashDo
	Preload(fields ...field.RelationField) IFlashDo
	FirstOrInit() (*gen_model.Flash, error)
	FirstOrCreate() (*gen_model.Flash, error)
	FindByPage(offset int, limit int) (result []*gen_model.Flash, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFlashDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f flashDo) Debug() IFlashDo {
	return f.withDO(f.DO.Debug())
}

func (f flashDo) WithContext(ctx context.Context) IFlashDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flashDo) ReadDB() IFlashDo {
	return f.Clauses(dbresolver.Read)
}

func (f flashDo) WriteDB() IFlashDo {
	return f.Clauses(dbresolver.Write)
}

func (f flashDo) Session(config *gorm.Session) IFlashDo {
	return f.withDO(f.DO.Session(config))
}

func (f flashDo) Clauses(conds ...clause.Expression) IFlashDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flashDo) Returning(value interface{}, columns ...string) IFlashDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flashDo) Not(conds ...gen.Condition) IFlashDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flashDo) Or(conds ...gen.Condition) IFlashDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flashDo) Select(conds ...field.Expr) IFlashDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flashDo) Where(conds ...gen.Condition) IFlashDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flashDo) Order(conds ...field.Expr) IFlashDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flashDo) Distinct(cols ...field.Expr) IFlashDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flashDo) Omit(cols ...field.Expr) IFlashDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flashDo) Join(table schema.Tabler, on ...field.Expr) IFlashDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flashDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFlashDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flashDo) RightJoin(table schema.Tabler, on ...field.Expr) IFlashDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flashDo) Group(cols ...field.Expr) IFlashDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flashDo) Having(conds ...gen.Condition) IFlashDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flashDo) Limit(limit int) IFlashDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flashDo) Offset(offset int) IFlashDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flashDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFlashDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flashDo) Unscoped() IFlashDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flashDo) Create(values ...*gen_model.Flash) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flashDo) CreateInBatches(values []*gen_model.Flash, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flashDo) Save(values ...*gen_model.Flash) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flashDo) First() (*gen_model.Flash, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Flash), nil
	}
}

func (f flashDo) Take() (*gen_model.Flash, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Flash), nil
	}
}

func (f flashDo) Last() (*gen_model.Flash, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Flash), nil
	}
}

func (f flashDo) Find() ([]*gen_model.Flash, error) {
	result, err := f.DO.Find()
	return result.([]*gen_model.Flash), err
}

func (f flashDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Flash, err error) {
	buf := make([]*gen_model.Flash, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flashDo) FindInBatches(result *[]*gen_model.Flash, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flashDo) Attrs(attrs ...field.AssignExpr) IFlashDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flashDo) Assign(attrs ...field.AssignExpr) IFlashDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flashDo) Joins(fields ...field.RelationField) IFlashDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flashDo) Preload(fields ...field.RelationField) IFlashDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flashDo) FirstOrInit() (*gen_model.Flash, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Flash), nil
	}
}

func (f flashDo) FirstOrCreate() (*gen_model.Flash, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Flash), nil
	}
}

func (f flashDo) FindByPage(offset int, limit int) (result []*gen_model.Flash, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flashDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flashDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flashDo) Delete(models ...*gen_model.Flash) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flashDo) withDO(do gen.Dao) *flashDo {
	f.DO = *do.(*gen.DO)
	return f
}
