// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newQq(db *gorm.DB, opts ...gen.DOOption) qq {
	_qq := qq{}

	_qq.qqDo.UseDB(db, opts...)
	_qq.qqDo.UseModel(&gen_model.Qq{})

	tableName := _qq.qqDo.TableName()
	_qq.ALL = field.NewAsterisk(tableName)
	_qq.ID = field.NewInt32(tableName, "id")
	_qq.Title = field.NewString(tableName, "title")
	_qq.Qq = field.NewString(tableName, "qq")
	_qq.IsLock = field.NewBool(tableName, "is_lock")
	_qq.Inputtime = field.NewInt32(tableName, "inputtime")

	_qq.fillFieldMap()

	return _qq
}

type qq struct {
	qqDo

	ALL       field.Asterisk
	ID        field.Int32
	Title     field.String
	Qq        field.String
	IsLock    field.Bool
	Inputtime field.Int32

	fieldMap map[string]field.Expr
}

func (q qq) Table(newTableName string) *qq {
	q.qqDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qq) As(alias string) *qq {
	q.qqDo.DO = *(q.qqDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qq) updateTableName(table string) *qq {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Title = field.NewString(table, "title")
	q.Qq = field.NewString(table, "qq")
	q.IsLock = field.NewBool(table, "is_lock")
	q.Inputtime = field.NewInt32(table, "inputtime")

	q.fillFieldMap()

	return q
}

func (q *qq) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qq) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["id"] = q.ID
	q.fieldMap["title"] = q.Title
	q.fieldMap["qq"] = q.Qq
	q.fieldMap["is_lock"] = q.IsLock
	q.fieldMap["inputtime"] = q.Inputtime
}

func (q qq) clone(db *gorm.DB) qq {
	q.qqDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qq) replaceDB(db *gorm.DB) qq {
	q.qqDo.ReplaceDB(db)
	return q
}

type qqDo struct{ gen.DO }

type IQqDo interface {
	gen.SubQuery
	Debug() IQqDo
	WithContext(ctx context.Context) IQqDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQqDo
	WriteDB() IQqDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQqDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQqDo
	Not(conds ...gen.Condition) IQqDo
	Or(conds ...gen.Condition) IQqDo
	Select(conds ...field.Expr) IQqDo
	Where(conds ...gen.Condition) IQqDo
	Order(conds ...field.Expr) IQqDo
	Distinct(cols ...field.Expr) IQqDo
	Omit(cols ...field.Expr) IQqDo
	Join(table schema.Tabler, on ...field.Expr) IQqDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQqDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQqDo
	Group(cols ...field.Expr) IQqDo
	Having(conds ...gen.Condition) IQqDo
	Limit(limit int) IQqDo
	Offset(offset int) IQqDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQqDo
	Unscoped() IQqDo
	Create(values ...*gen_model.Qq) error
	CreateInBatches(values []*gen_model.Qq, batchSize int) error
	Save(values ...*gen_model.Qq) error
	First() (*gen_model.Qq, error)
	Take() (*gen_model.Qq, error)
	Last() (*gen_model.Qq, error)
	Find() ([]*gen_model.Qq, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Qq, err error)
	FindInBatches(result *[]*gen_model.Qq, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Qq) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQqDo
	Assign(attrs ...field.AssignExpr) IQqDo
	Joins(fields ...field.RelationField) IQqDo
	Preload(fields ...field.RelationField) IQqDo
	FirstOrInit() (*gen_model.Qq, error)
	FirstOrCreate() (*gen_model.Qq, error)
	FindByPage(offset int, limit int) (result []*gen_model.Qq, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQqDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qqDo) Debug() IQqDo {
	return q.withDO(q.DO.Debug())
}

func (q qqDo) WithContext(ctx context.Context) IQqDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qqDo) ReadDB() IQqDo {
	return q.Clauses(dbresolver.Read)
}

func (q qqDo) WriteDB() IQqDo {
	return q.Clauses(dbresolver.Write)
}

func (q qqDo) Session(config *gorm.Session) IQqDo {
	return q.withDO(q.DO.Session(config))
}

func (q qqDo) Clauses(conds ...clause.Expression) IQqDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qqDo) Returning(value interface{}, columns ...string) IQqDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qqDo) Not(conds ...gen.Condition) IQqDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qqDo) Or(conds ...gen.Condition) IQqDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qqDo) Select(conds ...field.Expr) IQqDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qqDo) Where(conds ...gen.Condition) IQqDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qqDo) Order(conds ...field.Expr) IQqDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qqDo) Distinct(cols ...field.Expr) IQqDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qqDo) Omit(cols ...field.Expr) IQqDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qqDo) Join(table schema.Tabler, on ...field.Expr) IQqDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qqDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQqDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qqDo) RightJoin(table schema.Tabler, on ...field.Expr) IQqDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qqDo) Group(cols ...field.Expr) IQqDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qqDo) Having(conds ...gen.Condition) IQqDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qqDo) Limit(limit int) IQqDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qqDo) Offset(offset int) IQqDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qqDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQqDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qqDo) Unscoped() IQqDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qqDo) Create(values ...*gen_model.Qq) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qqDo) CreateInBatches(values []*gen_model.Qq, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qqDo) Save(values ...*gen_model.Qq) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qqDo) First() (*gen_model.Qq, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Qq), nil
	}
}

func (q qqDo) Take() (*gen_model.Qq, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Qq), nil
	}
}

func (q qqDo) Last() (*gen_model.Qq, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Qq), nil
	}
}

func (q qqDo) Find() ([]*gen_model.Qq, error) {
	result, err := q.DO.Find()
	return result.([]*gen_model.Qq), err
}

func (q qqDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Qq, err error) {
	buf := make([]*gen_model.Qq, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qqDo) FindInBatches(result *[]*gen_model.Qq, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qqDo) Attrs(attrs ...field.AssignExpr) IQqDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qqDo) Assign(attrs ...field.AssignExpr) IQqDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qqDo) Joins(fields ...field.RelationField) IQqDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qqDo) Preload(fields ...field.RelationField) IQqDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qqDo) FirstOrInit() (*gen_model.Qq, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Qq), nil
	}
}

func (q qqDo) FirstOrCreate() (*gen_model.Qq, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Qq), nil
	}
}

func (q qqDo) FindByPage(offset int, limit int) (result []*gen_model.Qq, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qqDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qqDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qqDo) Delete(models ...*gen_model.Qq) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qqDo) withDO(do gen.Dao) *qqDo {
	q.DO = *do.(*gen.DO)
	return q
}
