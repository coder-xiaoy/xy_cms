// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xy_cms/internal/dal/gen_model"
)

func newResume(db *gorm.DB, opts ...gen.DOOption) resume {
	_resume := resume{}

	_resume.resumeDo.UseDB(db, opts...)
	_resume.resumeDo.UseModel(&gen_model.Resume{})

	tableName := _resume.resumeDo.TableName()
	_resume.ALL = field.NewAsterisk(tableName)
	_resume.ID = field.NewInt32(tableName, "id")
	_resume.Title = field.NewString(tableName, "title")
	_resume.Inputtime = field.NewInt32(tableName, "inputtime")
	_resume.Truename = field.NewString(tableName, "truename")
	_resume.Age = field.NewString(tableName, "age")
	_resume.Telephone = field.NewString(tableName, "telephone")
	_resume.Degree = field.NewString(tableName, "degree")
	_resume.Address = field.NewString(tableName, "address")
	_resume.School = field.NewString(tableName, "school")
	_resume.Work = field.NewString(tableName, "work")

	_resume.fillFieldMap()

	return _resume
}

type resume struct {
	resumeDo

	ALL       field.Asterisk
	ID        field.Int32
	Title     field.String
	Inputtime field.Int32
	Truename  field.String
	Age       field.String
	Telephone field.String
	Degree    field.String
	Address   field.String
	School    field.String
	Work      field.String

	fieldMap map[string]field.Expr
}

func (r resume) Table(newTableName string) *resume {
	r.resumeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resume) As(alias string) *resume {
	r.resumeDo.DO = *(r.resumeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resume) updateTableName(table string) *resume {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.Title = field.NewString(table, "title")
	r.Inputtime = field.NewInt32(table, "inputtime")
	r.Truename = field.NewString(table, "truename")
	r.Age = field.NewString(table, "age")
	r.Telephone = field.NewString(table, "telephone")
	r.Degree = field.NewString(table, "degree")
	r.Address = field.NewString(table, "address")
	r.School = field.NewString(table, "school")
	r.Work = field.NewString(table, "work")

	r.fillFieldMap()

	return r
}

func (r *resume) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resume) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 10)
	r.fieldMap["id"] = r.ID
	r.fieldMap["title"] = r.Title
	r.fieldMap["inputtime"] = r.Inputtime
	r.fieldMap["truename"] = r.Truename
	r.fieldMap["age"] = r.Age
	r.fieldMap["telephone"] = r.Telephone
	r.fieldMap["degree"] = r.Degree
	r.fieldMap["address"] = r.Address
	r.fieldMap["school"] = r.School
	r.fieldMap["work"] = r.Work
}

func (r resume) clone(db *gorm.DB) resume {
	r.resumeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r resume) replaceDB(db *gorm.DB) resume {
	r.resumeDo.ReplaceDB(db)
	return r
}

type resumeDo struct{ gen.DO }

type IResumeDo interface {
	gen.SubQuery
	Debug() IResumeDo
	WithContext(ctx context.Context) IResumeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResumeDo
	WriteDB() IResumeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResumeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResumeDo
	Not(conds ...gen.Condition) IResumeDo
	Or(conds ...gen.Condition) IResumeDo
	Select(conds ...field.Expr) IResumeDo
	Where(conds ...gen.Condition) IResumeDo
	Order(conds ...field.Expr) IResumeDo
	Distinct(cols ...field.Expr) IResumeDo
	Omit(cols ...field.Expr) IResumeDo
	Join(table schema.Tabler, on ...field.Expr) IResumeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResumeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResumeDo
	Group(cols ...field.Expr) IResumeDo
	Having(conds ...gen.Condition) IResumeDo
	Limit(limit int) IResumeDo
	Offset(offset int) IResumeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResumeDo
	Unscoped() IResumeDo
	Create(values ...*gen_model.Resume) error
	CreateInBatches(values []*gen_model.Resume, batchSize int) error
	Save(values ...*gen_model.Resume) error
	First() (*gen_model.Resume, error)
	Take() (*gen_model.Resume, error)
	Last() (*gen_model.Resume, error)
	Find() ([]*gen_model.Resume, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Resume, err error)
	FindInBatches(result *[]*gen_model.Resume, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen_model.Resume) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResumeDo
	Assign(attrs ...field.AssignExpr) IResumeDo
	Joins(fields ...field.RelationField) IResumeDo
	Preload(fields ...field.RelationField) IResumeDo
	FirstOrInit() (*gen_model.Resume, error)
	FirstOrCreate() (*gen_model.Resume, error)
	FindByPage(offset int, limit int) (result []*gen_model.Resume, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResumeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resumeDo) Debug() IResumeDo {
	return r.withDO(r.DO.Debug())
}

func (r resumeDo) WithContext(ctx context.Context) IResumeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resumeDo) ReadDB() IResumeDo {
	return r.Clauses(dbresolver.Read)
}

func (r resumeDo) WriteDB() IResumeDo {
	return r.Clauses(dbresolver.Write)
}

func (r resumeDo) Session(config *gorm.Session) IResumeDo {
	return r.withDO(r.DO.Session(config))
}

func (r resumeDo) Clauses(conds ...clause.Expression) IResumeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resumeDo) Returning(value interface{}, columns ...string) IResumeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resumeDo) Not(conds ...gen.Condition) IResumeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resumeDo) Or(conds ...gen.Condition) IResumeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resumeDo) Select(conds ...field.Expr) IResumeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resumeDo) Where(conds ...gen.Condition) IResumeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resumeDo) Order(conds ...field.Expr) IResumeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resumeDo) Distinct(cols ...field.Expr) IResumeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resumeDo) Omit(cols ...field.Expr) IResumeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resumeDo) Join(table schema.Tabler, on ...field.Expr) IResumeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resumeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResumeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resumeDo) RightJoin(table schema.Tabler, on ...field.Expr) IResumeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resumeDo) Group(cols ...field.Expr) IResumeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resumeDo) Having(conds ...gen.Condition) IResumeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resumeDo) Limit(limit int) IResumeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resumeDo) Offset(offset int) IResumeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resumeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResumeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resumeDo) Unscoped() IResumeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resumeDo) Create(values ...*gen_model.Resume) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resumeDo) CreateInBatches(values []*gen_model.Resume, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resumeDo) Save(values ...*gen_model.Resume) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resumeDo) First() (*gen_model.Resume, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Resume), nil
	}
}

func (r resumeDo) Take() (*gen_model.Resume, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Resume), nil
	}
}

func (r resumeDo) Last() (*gen_model.Resume, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Resume), nil
	}
}

func (r resumeDo) Find() ([]*gen_model.Resume, error) {
	result, err := r.DO.Find()
	return result.([]*gen_model.Resume), err
}

func (r resumeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.Resume, err error) {
	buf := make([]*gen_model.Resume, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resumeDo) FindInBatches(result *[]*gen_model.Resume, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resumeDo) Attrs(attrs ...field.AssignExpr) IResumeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resumeDo) Assign(attrs ...field.AssignExpr) IResumeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resumeDo) Joins(fields ...field.RelationField) IResumeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resumeDo) Preload(fields ...field.RelationField) IResumeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resumeDo) FirstOrInit() (*gen_model.Resume, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Resume), nil
	}
}

func (r resumeDo) FirstOrCreate() (*gen_model.Resume, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.Resume), nil
	}
}

func (r resumeDo) FindByPage(offset int, limit int) (result []*gen_model.Resume, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resumeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resumeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resumeDo) Delete(models ...*gen_model.Resume) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resumeDo) withDO(do gen.Dao) *resumeDo {
	r.DO = *do.(*gen.DO)
	return r
}
